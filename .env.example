# Ultimate Discord Intelligence Bot - Environment Configuration Template
# Copy this file to .env and customize for your deployment

# ====== REQUIRED API KEYS ======
# At least one of these is required for LLM functionality
# Prefer creating org / project scoped keys with least privileges.
OPENAI_API_KEY=sk-your-openai-key-here
OPENROUTER_API_KEY=sk-your-openrouter-key-here
# Attribution (recommended by OpenRouter)
OPENROUTER_REFERER=https://yourapp.example.com
OPENROUTER_TITLE=Ultimate Discord Intelligence Bot

# ====== DISCORD INTEGRATION ======
# Required for Discord bot functionality and notifications
DISCORD_BOT_TOKEN=your-discord-bot-token-here
DISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/YOUR_WEBHOOK_HERE
DISCORD_PRIVATE_WEBHOOK_URL=https://discord.com/api/webhooks/YOUR_PRIVATE_WEBHOOK_HERE
# Optional: Alertmanager → Discord adapter webhook
DISCORD_ALERT_WEBHOOK=https://discord.com/api/webhooks/YOUR_ALERTS_WEBHOOK

# ====== WEBHOOK SECURITY ======
# CRITICAL: Set these to secure random values (never use "CHANGE_ME")
# Generate with: python -c "import secrets; print(secrets.token_urlsafe(32))"
WEBHOOK_SECRET_DEFAULT=your-secure-webhook-secret-here
# Optional additional webhook secrets for rotation (support multi-secret validation)
WEBHOOK_SECRET_BACKUP=your-backup-webhook-secret-here

# ====== VECTOR DATABASE ======
# Qdrant for semantic search and memory storage
QDRANT_URL=http://localhost:6333
QDRANT_API_KEY=your-qdrant-api-key-here
QDRANT_PREFER_GRPC=false
QDRANT_GRPC_PORT=6334

# ====== OPTIONAL EXTERNAL SERVICES ======
# Fact-checking and content analysis
GOOGLE_API_KEY=your-google-api-key-here
PERSPECTIVE_API_KEY=your-perspective-api-key-here
SERPLY_API_KEY=your-serply-api-key-here
EXA_API_KEY=your-exa-api-key-here
PERPLEXITY_API_KEY=your-perplexity-api-key-here
WOLFRAM_ALPHA_APP_ID=your-wolfram-alpha-app-id-here

# ====== CORE SYSTEM FEATURES ======
SERVICE_NAME=ultimate-discord-intel
ENVIRONMENT=development
ENABLE_API=true
ENABLE_TRACING=true
ENABLE_PROMETHEUS_ENDPOINT=true
PROMETHEUS_ENDPOINT_PATH=/metrics
ENABLE_HTTP_METRICS=true
ENABLE_PROFILING=true

# ====== CONTENT PROCESSING ======
ENABLE_CACHE_GLOBAL=true
ENABLE_CACHE_TRANSCRIPT=true
ENABLE_CACHE_VECTOR=true

# ====== REINFORCEMENT LEARNING ======
ENABLE_RL_GLOBAL=true
ENABLE_RL_ROUTING=true
ENABLE_RL_PROMPT=true
ENABLE_RL_RETRIEVAL=true

# ====== DISCORD INTEGRATIONS ======
ENABLE_DISCORD_ARCHIVER=true
ENABLE_DISCORD_COMMANDS=true
ENABLE_DISCORD_MONITOR=true

# ====== SECURITY AND PRIVACY ======
ENABLE_PII_DETECTION=true
ENABLE_CONTENT_MODERATION=true
ENABLE_RATE_LIMITING=true
ENABLE_AUDIT_LOGGING=true
ENABLE_GROUNDING=true
ENABLE_RAG_CONTEXT=true
ENABLE_VECTOR_SEARCH=true
ENABLE_INGEST_YOUTUBE=true
ENABLE_INGEST_TWITCH=true
ENABLE_INGEST_TIKTOK=true
ENABLE_INGEST_CONCURRENT=true
ENABLE_INGEST_STRICT=false

# ====== PERFORMANCE TUNING ======
MAX_WORKERS=4
CACHE_TTL_SECONDS=3600
VECTOR_BATCH_SIZE=100
RATE_LIMIT_RPS=10
RATE_LIMIT_BURST=20

# ====== HTTP AND NETWORKING ======
ENABLE_HTTP_RETRY=true
HTTP_TIMEOUT=30
HTTP_MAX_RETRIES=3
# Preferred granular: RETRY_MAX_ATTEMPTS used by core.http_utils (overrides config/retry.yaml)
RETRY_MAX_ATTEMPTS=3
HTTP_BACKOFF_BASE=0.5
HTTP_BACKOFF_MAX=8

# ====== DEVELOPMENT AND DEBUG ======
DEBUG=false
LOG_LEVEL=INFO
DEBUG_TOOLS=true

# ====== ROUTING & REWARD WEIGHTS ======
# Default download quality if not provided by command/context
DEFAULT_DOWNLOAD_QUALITY=1080p
# RL reward shaping weights and latency window (ms)
REWARD_COST_WEIGHT=0.5
REWARD_LATENCY_WEIGHT=0.5
REWARD_LATENCY_MS_WINDOW=2000

# ====== DATABASE CONFIGURATION ======
DATABASE_URL=sqlite:///crew.db
MEMORY_DB_PATH=./memory.db
ARCHIVE_DB_PATH=./data/archive_manifest.db
TRUST_TRACKER_PATH=./data/trustworthiness.json

# ====== CREWAI PATHS ======
# Customize CrewAI working directories (optional)
# CREWAI_BASE_DIR=~/crew_data
# CREWAI_DOWNLOADS_DIR=~/crew_data/Downloads
# CREWAI_CONFIG_DIR=~/crew_data/Config
# CREWAI_LOGS_DIR=~/crew_data/Logs
# CREWAI_PROCESSING_DIR=~/crew_data/Processing
# CREWAI_TEMP_DIR=~/crew_data/temp
# CREWAI_YTDLP_DIR=./yt-dlp
# CREWAI_YTDLP_CONFIG=./yt-dlp/config/crewai-system.conf
# CREWAI_YTDLP_ARCHIVE=./yt-dlp/archives/crewai_downloads.txt

# ====== OPENTELEMETRY TRACING ======
# OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:14268/api/traces
# OTEL_EXPORTER_OTLP_HEADERS=authorization=Bearer your-token-here
# OTEL_TRACES_SAMPLER=parentbased_traceidratio
# OTEL_TRACES_SAMPLER_ARG=0.1

# ====== ARCHIVE API ======
ARCHIVE_API_TOKEN=your-archive-api-token-here

# ====== PLUGIN SYSTEM ======
ENABLE_PLUGINS=true
PLUGIN_TRUST_LEVEL=verified
PLUGIN_DIR=./plugins
PLUGIN_MAX_EXECUTION_SECONDS=30

# ====== ADDITIONAL INTEGRATIONS ======
# Redis for caching (optional)
REDIS_URL=redis://localhost:6379
REDIS_TLS=false
REDIS_USERNAME=
REDIS_PASSWORD=

# PostgreSQL for metadata (optional)
POSTGRES_URL=postgresql://user:password@localhost:5432/ultimate_discord_bot
POSTGRES_POOL_SIZE=10
POSTGRES_POOL_TIMEOUT=30

# ====== SETUP INSTRUCTIONS ======
#
# 1. Discord Bot Token:
#    - Go to https://discord.com/developers/applications
#    - Create New Application → Bot → Copy Token
#    - Enable "Message Content Intent" and "Server Members Intent"
#
# 2. OpenAI API Key:
#    - Visit https://platform.openai.com/api-keys
#    - Create new API key
#
# 3. Qdrant Setup:
#    - Local: docker run -p 6333:6333 qdrant/qdrant
#    - Cloud: Visit https://cloud.qdrant.io
#
# 4. Discord Webhooks (optional):
#    - Server Settings → Integrations → Webhooks
#    - Create webhook for notifications
#
###############################################
#  SECURITY & OPERATIONAL GUIDANCE
#  (Do NOT commit a real .env to source control)
###############################################
# Rotate secrets at least every 90 days (or on suspicion of compromise).
# Use separate keys per environment (dev/staging/prod).
# Never reuse Discord bot tokens across servers.
# Prefer ephemeral / short-lived API keys where provider supports them.
# For rotation: set WEBHOOK_SECRET_BACKUP in advance, deploy, then promote it
# to WEBHOOK_SECRET_DEFAULT and generate a new backup.
# Restrict outbound network for the process to required domains only.
# Consider using a secrets manager (Vault, AWS Secrets Manager, GCP Secret Manager)
# and injecting via environment at runtime instead of storing in .env files.

# 5. Start the bot:
#    make dev
#    python -m ultimate_discord_intelligence_bot.setup_cli run discord
#    ./ops/deployment/scripts/deploy.sh (container / orchestrated deploy)
