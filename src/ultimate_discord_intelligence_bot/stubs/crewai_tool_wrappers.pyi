"""Type stubs for crewai_tool_wrappers module."""

import builtins
from abc import ABC, abstractmethod
from typing import Any

class CrewAIToolWrapper(ABC):
    def __init__(self, **kwargs: Any) -> None: ...
    @abstractmethod
    def _run(self, *args: Any, **kwargs: Any) -> Any: ...
    def run(self, *args: Any, **kwargs: Any) -> Any: ...

class ToolWrapper(CrewAIToolWrapper):
    def __init__(self, tool: Any, **kwargs: Any) -> None: ...

class AsyncToolWrapper(CrewAIToolWrapper):
    def __init__(self, tool: Any, **kwargs: Any) -> None: ...

class ToolRegistry:
    def __init__(self, **kwargs: Any) -> None: ...
    def register(self, name: str, tool: Any) -> None: ...
    def get(self, name: str) -> Any | None: ...
    def list(self) -> builtins.list[str]: ...

class ToolManager:
    def __init__(self, **kwargs: Any) -> None: ...
    def wrap_tool(self, tool: Any) -> CrewAIToolWrapper: ...
    def create_wrapper(self, tool: Any, is_async: bool = False) -> CrewAIToolWrapper: ...
