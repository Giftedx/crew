"""
DEPRECATED: performance_dashboard.py

The PerformanceDashboard module has been deprecated in Phase 7/8 (October 2025).
All functionality migrated to AnalyticsService and intelligent monitoring system.

DEPRECATION DATE: October 19, 2025
REMOVAL TARGET: Phase 8 cleanup
DO NOT ADD NEW CODE TO THIS FILE.

=============================================================================
MIGRATION GUIDE
=============================================================================

PerformanceDashboard provided unified performance monitoring across cache,
cost, errors, memory, and database. Use AnalyticsService for unified interface:

**BEFORE** (performance_dashboard.py):

```python
from ultimate_discord_intelligence_bot.performance_dashboard import (
    PerformanceDashboard,
    get_performance_dashboard
)

dashboard = get_performance_dashboard()
metrics = dashboard.get_comprehensive_metrics()
recommendations = dashboard.get_optimization_recommendations()
summary = dashboard.get_dashboard_summary()
```

**AFTER** (Use AnalyticsService):

```python
from ultimate_discord_intelligence_bot.observability import get_analytics_service

analytics = get_analytics_service()

# System health (replaces dashboard.get_comprehensive_metrics)
health_result = analytics.get_system_health()
if health_result.ok:
    print(f"Overall score: {health_result.data['overall_score']}")
    print(f"Status: {health_result.data['status']}")
    print(f"Recommendations: {health_result.data['recommendations']}")

# Performance metrics (cache, latency, errors, cost)
perf_result = analytics.get_performance_metrics()
if perf_result.ok:
    print(f"Cache hit rate: {perf_result.data['cache_hit_rate']}")
    print(f"Avg latency: {perf_result.data['avg_latency_ms']}ms")
    print(f"Error rate: {perf_result.data['error_rate']}")
    print(f"Cost savings: ${perf_result.data['cost_savings']}")

# Agent-specific performance (new in Phase 7)
agent_report = analytics.get_agent_performance_report("my_agent", days=30)
if agent_report.ok:
    print(f"Agent score: {agent_report.data['overall_score']}")
    print(f"Recommendations: {agent_report.data['recommendations']}")
```

**For FastAPI Routes** (server/routers/performance_dashboard.py):

```python
from fastapi import APIRouter
from ultimate_discord_intelligence_bot.observability import get_analytics_service

router = APIRouter()

@router.get("/api/performance/")
async def get_performance_data():
    """Get comprehensive performance data."""
    analytics = get_analytics_service()
    
    health = analytics.get_system_health()
    metrics = analytics.get_performance_metrics()
    
    return {
        "health": health.data if health.ok else {},
        "metrics": metrics.data if metrics.ok else {},
        "timestamp": time.time()
    }

@router.get("/api/performance/recommendations")
async def get_recommendations():
    """Get optimization recommendations."""
    analytics = get_analytics_service()
    health = analytics.get_system_health()
    
    return {
        "recommendations": health.data.get("recommendations", [])
        if health.ok else []
    }
```

=============================================================================
FEATURE MAPPING
=============================================================================

| PerformanceDashboard Method | AnalyticsService Replacement |
|------------------------------|------------------------------|
| get_comprehensive_metrics() | get_system_health() + get_performance_metrics() |
| get_optimization_recommendations() | get_system_health().recommendations |
| get_dashboard_summary() | get_system_health() |
| _get_cache_metrics() | get_performance_metrics().cache_hit_rate |
| _get_cost_metrics() | get_performance_metrics().cost_savings |
| _get_error_metrics() | get_performance_metrics().error_rate |
| _get_memory_metrics() | get_system_health() (component health) |
| _get_database_metrics() | get_system_health() (component health) |
| _get_system_health() | get_system_health() |
| export_metrics_json() | StepResult.data (already JSON-serializable) |

**New Capabilities in AnalyticsService** (Phase 7):

- Agent-specific performance tracking
- Comparative agent analysis
- AI routing metrics integration
- Enhanced recommendation engine

=============================================================================
RATIONALE
=============================================================================

- PerformanceDashboard directly accessed internal components (tight coupling)
- Mixed concerns: system health + agent performance + UI formatting
- Difficult to extend with new metrics
- AnalyticsService provides clean facade pattern
- Better separation: data collection (AnalyticsService) vs presentation (UI layer)
- Phase 7 added agent monitoring to AnalyticsService
- StepResult pattern provides consistent error handling

=============================================================================
AFFECTED COMPONENTS
=============================================================================

Known usages to migrate:

1. **FastAPI Routes** (`server/routers/performance_dashboard.py`)
   - Update to use AnalyticsService
   - Return StepResult.data for JSON responses

2. **Dashboard UI** (`server/static/performance_dashboard.html`)
   - Update API endpoints to call AnalyticsService routes
   - Adjust data structure for new format

3. **Tests** (`tests/test_enhanced_system.py`, `tests/test_performance_dashboard.py`)
   - Replace PerformanceDashboard with AnalyticsService
   - Update assertions for new data structure

4. **Monitoring Scripts** (any direct imports)
   - Replace with get_analytics_service()
   - Handle StepResult return type

=============================================================================
MIGRATION STEPS
=============================================================================

1. **Update Imports**:

   ```python
   # Remove
   from ultimate_discord_intelligence_bot.performance_dashboard import PerformanceDashboard
   
   # Add
   from ultimate_discord_intelligence_bot.observability import get_analytics_service
   ```

2. **Update Instantiation**:

   ```python
   # Remove
   dashboard = PerformanceDashboard() or get_performance_dashboard()
   
   # Add
   analytics = get_analytics_service()
   ```

3. **Update Method Calls**:

   ```python
   # Old
   metrics = dashboard.get_comprehensive_metrics()
   cache_hit_rate = metrics["cache_performance"]["hit_rate"]
   
   # New
   perf_result = analytics.get_performance_metrics()
   cache_hit_rate = perf_result.data["cache_hit_rate"] if perf_result.ok else 0.0
   ```

4. **Handle StepResult** (important!):

   ```python
   # Always check result.ok before accessing result.data
   result = analytics.get_system_health()
   if result.ok:
       score = result.data["overall_score"]
   else:
       # Handle failure
       logger.error(f"Health check failed: {result.error}")
   ```

5. **Test Changes**:
   - Run existing tests
   - Verify metrics match previous values
   - Check UI rendering

=============================================================================
REFERENCES
=============================================================================

- ADR-0005: Analytics Consolidation Strategy
- PHASE7_PERFORMANCE_CONSOLIDATION_COMPLETE.md
- observability/analytics_service.py (unified facade)
- observability/intelligent_alerts.py (alerting system)
- tests/test_analytics_service.py (usage examples)

For questions, see Phase 7 documentation.
"""

raise ImportError(
    "performance_dashboard.py is deprecated. "
    "Use observability.AnalyticsService for unified monitoring. "
    "See .DEPRECATED_PHASE7_DASHBOARD for migration guide."
)
