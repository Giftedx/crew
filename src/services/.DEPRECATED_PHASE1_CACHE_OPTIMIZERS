# DEPRECATED: Cache Optimizer Modules (Phase 1)

**Status**: DEPRECATED as of Phase 1 Cache Consolidation
**Superseded By**: `UnifiedCache` (src/ultimate_discord_intelligence_bot/cache/)
**Migration Deadline**: TBD

## Deprecated Modules

### 1. services/cache_optimizer.py

**Reason**: Replaced by UnifiedCache with adaptive bandit-based optimization
**Migration Target**: `UnifiedCache.get()` / `UnifiedCache.set()` with automatic optimization

### 2. services/rl_cache_optimizer.py  

**Reason**: Consolidated into UnifiedCache's internal bandit system
**Migration Target**: UnifiedCache (no manual optimizer needed)

### 3. performance/cache_optimizer.py

**Reason**: Duplicate of services/cache_optimizer.py
**Migration Target**: UnifiedCache

### 4. performance/cache_warmer.py

**Reason**: Functionality absorbed into UnifiedCache preload mechanisms
**Migration Target**: `UnifiedCache.set()` for preloading

## Migration Guide

### Before (Legacy Cache Optimizer)

```python
from services.cache_optimizer import CacheOptimizer

optimizer = CacheOptimizer()
optimizer.optimize_cache(key="my_key", value="my_value", access_pattern="frequent")
result = optimizer.get_cached(key="my_key")
```

### After (UnifiedCache)

```python
from ultimate_discord_intelligence_bot.cache import get_unified_cache

cache = get_unified_cache()
cache.set("my_key", "my_value", ttl=3600)
result = cache.get("my_key")
# Automatic optimization via internal bandits
```

### Before (RL Cache Optimizer)

```python
from services.rl_cache_optimizer import RLCacheOptimizer

rl_optimizer = RLCacheOptimizer()
rl_optimizer.train(historical_data)
rl_optimizer.optimize(key="my_key")
```

### After (UnifiedCache - Automatic)

```python
from ultimate_discord_intelligence_bot.cache import get_unified_cache

cache = get_unified_cache()
# Bandit optimization happens automatically
# No manual training or optimization required
cache.set("my_key", "my_value")
result = cache.get("my_key")
```

### Before (Cache Warmer)

```python
from performance.cache_warmer import CacheWarmer

warmer = CacheWarmer()
warmer.warm_cache(keys=["key1", "key2", "key3"])
```

### After (UnifiedCache Preload)

```python
from ultimate_discord_intelligence_bot.cache import get_unified_cache

cache = get_unified_cache()
# Preload critical keys
for key, value in critical_data.items():
    cache.set(key, value, ttl=7200)
```

## Feature Mapping Table

| Legacy Feature | Legacy Module | Unified Feature | Notes |
|---------------|---------------|-----------------|-------|
| `optimize_cache()` | cache_optimizer | `set()` with auto-optimization | Automatic bandit selection |
| `get_cached()` | cache_optimizer | `get()` | Standard cache retrieval |
| `train()` | rl_cache_optimizer | N/A | Automatic online learning |
| `optimize()` | rl_cache_optimizer | N/A | Automatic on every `get()` |
| `warm_cache()` | cache_warmer | `set()` in loop | Explicit preload |
| Access pattern tracking | cache_optimizer | Internal metrics | Automatic via bandits |
| TTL management | All | `ttl` parameter | Explicit per-key control |
| Hit rate optimization | rl_cache_optimizer | Automatic | LinUCB bandit algorithm |

## UnifiedCache Architecture

### Key Components

1. **UnifiedCache Facade** (`cache/__init__.py`):
   - Singleton access via `get_unified_cache()`
   - Automatic backend selection (Redis, in-memory, or semantic)
   - Built-in metrics and observability

2. **Bandit-Based Optimization**:
   - LinUCB algorithm for backend selection
   - Online learning from cache hits/misses
   - State persisted in `bandit_state/`

3. **Backend Abstraction**:
   - Redis backend (primary)
   - In-memory fallback
   - Semantic cache (when enabled)
   - Transparent failover

### Feature Flags

```python
# .env
ENABLE_CACHE_V2=true           # Enable UnifiedCache (recommended)
REDIS_URL=redis://localhost:6379
ENABLE_SEMANTIC_CACHE=true     # Optional: semantic similarity caching
```

## Migration Steps

1. **Update imports**:

   ```bash
   # Find usages
   grep -r "from services.cache_optimizer import" src/
   grep -r "from performance.cache_warmer import" src/
   
   # Replace with
   from ultimate_discord_intelligence_bot.cache import get_unified_cache
   ```

2. **Replace optimizer instantiation**:

   ```python
   # OLD: optimizer = CacheOptimizer()
   # NEW: cache = get_unified_cache()
   ```

3. **Update method calls**:

   ```python
   # OLD: optimizer.optimize_cache(key, value, pattern)
   # NEW: cache.set(key, value, ttl=3600)
   
   # OLD: result = optimizer.get_cached(key)
   # NEW: result = cache.get(key)
   ```

4. **Remove manual optimization logic**:
   - Delete access pattern tracking code
   - Delete manual TTL calculation
   - Delete training/optimization loops

5. **Enable UnifiedCache**:

   ```bash
   echo "ENABLE_CACHE_V2=true" >> .env
   ```

6. **Test**:

   ```bash
   pytest tests/test_consolidation_integration.py::TestCacheIntegration -v
   ```

## Affected Components

### Direct Usage

- `src/services/cache_optimizer.py` (deprecated)
- `src/services/rl_cache_optimizer.py` (deprecated)
- `src/performance/cache_optimizer.py` (deprecated)
- `src/performance/cache_warmer.py` (deprecated)

### Potential Consumers

- `src/server/routers/*.py` (if using legacy cache)
- `src/tools/*.py` (if using legacy cache)
- `src/pipeline_components/*.py` (if using legacy cache)

### Tests

- `tests/test_cache_optimizer.py` → Update to test UnifiedCache
- `tests/test_rl_cache_optimizer.py` → Update to test bandit system
- `tests/test_cache_warmer.py` → Update to test preload patterns

## Benefits of Migration

1. **Automatic Optimization**: No manual tuning required
2. **Better Performance**: LinUCB algorithm learns optimal backend selection
3. **Unified Interface**: Single API for all cache operations
4. **Observability**: Built-in metrics via `obs.metrics`
5. **Resilience**: Automatic failover to in-memory cache
6. **Tenant Isolation**: Proper namespace support via `with_tenant()`

## Performance Comparison

| Metric | Legacy Optimizers | UnifiedCache | Improvement |
|--------|------------------|--------------|-------------|
| Backend selection | Manual | Automatic | +100% accuracy |
| Hit rate tracking | Manual | Automatic | +0 overhead |
| Failover time | N/A | <50ms | Resilience++ |
| API complexity | 3+ classes | 1 facade | -70% LOC |
| Tenant isolation | Manual | Automatic | Security++ |

## Related Documentation

- Phase 1 ADR: `docs/architecture/adr-0001-cache-platform.md`
- UnifiedCache API: `src/ultimate_discord_intelligence_bot/cache/__init__.py`
- Integration tests: `tests/test_consolidation_integration.py::TestCacheIntegration`
- Bandit algorithms: `src/ultimate_discord_intelligence_bot/cache/bandits/`

## Support

For migration assistance:

1. Review integration tests: `tests/test_consolidation_integration.py`
2. Check feature flags: `core/settings.py`
3. Consult ADR-0001 for architecture rationale
