"""
DEPRECATED: obs/performance_monitor.py

This baseline performance monitor was deprecated in Phase 7 (Performance Consolidation - October 2025).
Functionality migrated to AnalyticsService and canonical AgentPerformanceMonitor.

DEPRECATION DATE: October 19, 2025
REMOVAL TARGET: After Phase 7 validation (Week 12)
DO NOT ADD NEW CODE TO THIS FILE.

=============================================================================
MIGRATION GUIDE
=============================================================================

obs/performance_monitor.py provided baseline validation and resource monitoring.
Use AnalyticsService for unified interface:

BEFORE (obs/performance_monitor.py):
```python
from obs.performance_monitor import (
    PerformanceMonitor,
    get_performance_monitor,
    record_metric,
)

monitor = get_performance_monitor()
monitor.record_metric("response_time", 0.25)
monitor.add_alert_callback(my_alert_handler)
summary = monitor.get_performance_summary()
report = monitor.export_performance_report()
```

AFTER (Use AnalyticsService):
```python
from ultimate_discord_intelligence_bot.observability import get_analytics_service

analytics = get_analytics_service()

# System-level performance metrics
performance_result = analytics.get_performance_metrics()
if performance_result.ok:
    print(f"Cache hit rate: {performance_result.data['cache_hit_rate']}")
    print(f"Avg latency: {performance_result.data['avg_latency_ms']}ms")

# System health assessment
health_result = analytics.get_system_health()
if health_result.ok:
    print(f"Overall score: {health_result.data['overall_score']}")
    print(f"Status: {health_result.data['status']}")

# For agent-specific performance tracking
analytics.record_agent_performance(
    agent_name="my_agent",
    task_type="analysis",
    quality_score=0.87,
    response_time=0.25,
)
```

For low-level metrics collection:
```python
from obs.metrics import get_metrics

metrics = get_metrics()
metrics.counter("my_metric_total", labels={"outcome": "success"})
metrics.histogram("response_time_seconds", value=0.25)
```

=============================================================================
FEATURE MAPPING
=============================================================================

| obs/PerformanceMonitor                    | AnalyticsService / obs.metrics          |
|-------------------------------------------|-----------------------------------------|
| record_metric()                           | obs.metrics.histogram/counter           |
| get_performance_summary()                 | get_performance_metrics()               |
| get_resource_usage_summary()              | get_system_health()                     |
| export_performance_report()               | Combined health + performance results   |
| add_alert_callback()                      | observability.intelligent_alerts        |
| Baseline validation                       | obs.performance_baselines (unchanged)   |

=============================================================================
RATIONALE
=============================================================================

- obs/performance_monitor.py provided baseline/resource monitoring only
- Overlapped with AnalyticsService system health monitoring
- Metrics collection now standardized in obs.metrics module
- Alerting moved to intelligent_alerts module
- Phase 7 consolidation eliminates 5 monitors â†’ 1 canonical + 1 facade

=============================================================================
AFFECTED COMPONENTS
=============================================================================

Known usages (to be migrated):
- tests/test_performance_dashboard.py (may reference baseline monitoring)
- Any code using get_performance_monitor() global
- Discord alert callbacks (migrate to intelligent_alerts)

=============================================================================
REFERENCES
=============================================================================

- ADR-0005: Analytics Consolidation Strategy
- PHASE7_PERFORMANCE_CONSOLIDATION_COMPLETE.md
- Metrics module: obs/metrics.py (low-level metrics collection)
- Baselines: obs/performance_baselines.py (unchanged)
- Unified facade: observability/analytics_service.py

For questions, see Phase 7 documentation.
"""

raise ImportError(
    "obs/performance_monitor.py is deprecated. "
    "Use observability.AnalyticsService for system monitoring. "
    "See this file's docstring for migration guide."
)
