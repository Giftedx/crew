#!/usr/bin/env python3
"""
Phase 1 Environment Setup Script

This script sets up the production environment for the Ultimate Discord Intelligence Bot,
including environment configuration, service health checks, and OAuth validation.

Usage:
    python3 scripts/setup_phase1_environment.py [--check-only] [--interactive]
"""

import argparse
import os
import subprocess
import sys
from pathlib import Path


# Add src to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

try:
    from ultimate_discord_intelligence_bot.settings import get_settings  # noqa: F401
    from ultimate_discord_intelligence_bot.step_result import StepResult  # noqa: F401
except ImportError as e:
    print(f"Warning: Could not import project modules: {e}")
    print("Running in standalone mode...")


class Phase1EnvironmentSetup:
    """Phase 1 Environment Setup Manager."""

    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.env_file = self.project_root / ".env"
        self.env_example = self.project_root / ".env.example"
        self.results = {
            "environment_config": {"status": "pending", "details": {}},
            "service_health": {"status": "pending", "details": {}},
            "oauth_config": {"status": "pending", "details": {}},
        }

    def check_environment_variables(self) -> dict[str, any]:
        """Check current environment variable configuration."""
        print("🔍 Checking environment variables...")

        required_vars = [
            "DISCORD_BOT_TOKEN",
            "OPENAI_API_KEY",
            "QDRANT_URL",
        ]

        optional_vars = [
            "OPENROUTER_API_KEY",
            "POSTGRES_URL",
            "REDIS_URL",
            "MINIO_URL",
        ]

        results = {
            "required": {},
            "optional": {},
            "missing_required": [],
            "status": "healthy",
        }

        # Check required variables
        for var in required_vars:
            value = os.getenv(var)
            if value:
                results["required"][var] = "✅ Set"
            else:
                results["required"][var] = "❌ Missing"
                results["missing_required"].append(var)

        # Check optional variables
        for var in optional_vars:
            value = os.getenv(var)
            if value:
                results["optional"][var] = "✅ Set"
            else:
                results["optional"][var] = "⚠️ Not set"

        if results["missing_required"]:
            results["status"] = "unhealthy"

        return results

    def create_environment_template(self) -> bool:
        """Create a production-ready environment template."""
        print("📝 Creating environment configuration template...")

        if not self.env_example.exists():
            print("❌ .env.example not found")
            return False

        # Read the example file
        with open(self.env_example) as f:
            template_content = f.read()

        # Create a production template with placeholders
        production_template = f"""# Ultimate Discord Intelligence Bot - Production Environment Configuration
# Generated by Phase 1 Environment Setup
# Date: {self._get_timestamp()}

{template_content}

# ====== PHASE 1 PRODUCTION CONFIGURATION ======
# Production-specific settings
ENVIRONMENT=production
LOG_LEVEL=INFO
DEBUG=false

# Performance settings
MAX_CONCURRENT_REQUESTS=100
REQUEST_TIMEOUT=30
CACHE_TTL=3600

# Monitoring settings
ENABLE_METRICS=true
ENABLE_TRACING=true
METRICS_PORT=9090

# Security settings
ENABLE_RATE_LIMITING=true
RATE_LIMIT_REQUESTS_PER_MINUTE=60
"""

        # Write the production template
        env_production = self.project_root / ".env.production"
        with open(env_production, "w") as f:
            f.write(production_template)

        print(f"✅ Created production environment template: {env_production}")
        return True

    def check_service_health(self) -> dict[str, any]:
        """Check the health of all required services."""
        print("🏥 Checking service health...")

        services = {
            "qdrant": {"url": "http://localhost:6333", "status": "unknown"},
            "postgres": {"url": "postgresql://localhost:5432", "status": "unknown"},
            "redis": {"url": "redis://localhost:6379", "status": "unknown"},
            "minio": {"url": "http://localhost:9000", "status": "unknown"},
        }

        # Check each service
        for service_name, config in services.items():
            try:
                # Simple HTTP check for web services
                if service_name in ["qdrant", "minio"]:
                    import requests

                    response = requests.get(config["url"], timeout=5)
                    if response.status_code in [
                        200,
                        404,
                    ]:  # 404 is OK for some services
                        config["status"] = "healthy"
                    else:
                        config["status"] = "unhealthy"
                else:
                    # For database services, we'll mark as unknown for now
                    config["status"] = "unknown"
            except Exception as e:
                config["status"] = "unhealthy"
                config["error"] = str(e)

        return services

    def check_oauth_configuration(self) -> dict[str, any]:
        """Check OAuth configuration for all platforms."""
        print("🔐 Checking OAuth configuration...")

        platforms = ["youtube", "twitch", "tiktok", "instagram", "x"]
        oauth_status = {}

        for platform in platforms:
            client_id = os.getenv(f"{platform.upper()}_CLIENT_ID")
            client_secret = os.getenv(f"{platform.upper()}_CLIENT_SECRET")

            if client_id and client_secret:
                oauth_status[platform] = {
                    "status": "configured",
                    "client_id": "✅ Set",
                    "client_secret": "✅ Set",
                }
            else:
                oauth_status[platform] = {
                    "status": "not_configured",
                    "client_id": "❌ Missing" if not client_id else "✅ Set",
                    "client_secret": "❌ Missing" if not client_secret else "✅ Set",
                }

        return oauth_status

    def run_doctor_check(self) -> dict[str, any]:
        """Run the existing doctor check."""
        print("🩺 Running system doctor check...")

        try:
            result = subprocess.run(
                ["make", "doctor"],
                capture_output=True,
                text=True,
                cwd=self.project_root,
            )

            return {
                "exit_code": result.returncode,
                "stdout": result.stdout,
                "stderr": result.stderr,
                "status": "healthy" if result.returncode == 0 else "unhealthy",
            }
        except Exception as e:
            return {"exit_code": -1, "stdout": "", "stderr": str(e), "status": "error"}

    def generate_setup_report(self) -> str:
        """Generate a comprehensive setup report."""
        print("📊 Generating setup report...")

        report = f"""# Phase 1 Environment Setup Report
Generated: {self._get_timestamp()}

## Environment Configuration
Status: {self.results["environment_config"]["status"]}

### Required Variables
"""

        env_check = self.results["environment_config"]["details"]
        for var, status in env_check.get("required", {}).items():
            report += f"- {var}: {status}\n"

        report += "\n### Optional Variables\n"
        for var, status in env_check.get("optional", {}).items():
            report += f"- {var}: {status}\n"

        report += f"""
## Service Health
Status: {self.results["service_health"]["status"]}

"""

        service_check = self.results["service_health"]["details"]
        for service, config in service_check.items():
            report += f"- {service}: {config['status']}\n"
            if "error" in config:
                report += f"  Error: {config['error']}\n"

        report += f"""
## OAuth Configuration
Status: {self.results["oauth_config"]["status"]}

"""

        oauth_check = self.results["oauth_config"]["details"]
        for platform, config in oauth_check.items():
            report += f"- {platform}: {config['status']}\n"

        report += f"""
## Doctor Check Results
Status: {self.results.get("doctor_check", {}).get("status", "unknown")}

"""

        doctor_check = self.results.get("doctor_check", {})
        if doctor_check.get("stdout"):
            report += "### Output\n"
            report += doctor_check["stdout"]

        if doctor_check.get("stderr"):
            report += "\n### Errors\n"
            report += doctor_check["stderr"]

        return report

    def run_full_setup(self, check_only: bool = False, interactive: bool = False) -> bool:
        """Run the complete Phase 1 environment setup."""
        print("🚀 Starting Phase 1 Environment Setup")
        print("=" * 50)

        # Step 1: Environment Configuration
        print("\n📋 Step 1: Environment Configuration")
        env_check = self.check_environment_variables()
        self.results["environment_config"] = {
            "status": "healthy" if env_check["status"] == "healthy" else "unhealthy",
            "details": env_check,
        }

        if not check_only:
            self.create_environment_template()

        # Step 2: Service Health
        print("\n🏥 Step 2: Service Health Check")
        service_check = self.check_service_health()
        self.results["service_health"] = {
            "status": "healthy" if all(s["status"] == "healthy" for s in service_check.values()) else "unhealthy",
            "details": service_check,
        }

        # Step 3: OAuth Configuration
        print("\n🔐 Step 3: OAuth Configuration")
        oauth_check = self.check_oauth_configuration()
        self.results["oauth_config"] = {
            "status": "healthy" if all(c["status"] == "configured" for c in oauth_check.values()) else "unhealthy",
            "details": oauth_check,
        }

        # Step 4: Doctor Check
        print("\n🩺 Step 4: System Doctor Check")
        doctor_check = self.run_doctor_check()
        self.results["doctor_check"] = doctor_check

        # Generate and save report
        report = self.generate_setup_report()
        report_file = self.project_root / "docs" / "phase1_environment_setup_report.md"
        with open(report_file, "w") as f:
            f.write(report)

        print(f"\n📊 Setup report saved to: {report_file}")

        # Determine overall status
        overall_healthy = (
            self.results["environment_config"]["status"] == "healthy"
            and self.results["service_health"]["status"] == "healthy"
            and self.results["oauth_config"]["status"] == "healthy"
        )

        if overall_healthy:
            print("\n✅ Phase 1 Environment Setup: HEALTHY")
        else:
            print("\n⚠️ Phase 1 Environment Setup: NEEDS ATTENTION")
            print("Check the report for details on what needs to be configured.")

        return overall_healthy

    def _get_timestamp(self) -> str:
        """Get current timestamp for reports."""
        from datetime import datetime

        return datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC")


def main():
    """Main entry point."""
    parser = argparse.ArgumentParser(description="Phase 1 Environment Setup")
    parser.add_argument(
        "--check-only",
        action="store_true",
        help="Only check status, don't create files",
    )
    parser.add_argument("--interactive", action="store_true", help="Interactive mode for configuration")

    args = parser.parse_args()

    setup = Phase1EnvironmentSetup()
    success = setup.run_full_setup(check_only=args.check_only, interactive=args.interactive)

    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()
