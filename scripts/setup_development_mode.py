#!/usr/bin/env python3
"""
Development Mode Setup Script

This script sets up the Ultimate Discord Intelligence Bot in development mode,
allowing testing and development without requiring actual API keys or external services.

Usage:
    python3 scripts/setup_development_mode.py [--enable-mocks] [--disable-mocks]
"""

import argparse
import os
import sys
from pathlib import Path


# Add src to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))


class DevelopmentModeSetup:
    """Development Mode Configuration Manager."""

    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.env_file = self.project_root / ".env"
        self.env_example = self.project_root / ".env.example"

    def create_development_environment(self, enable_mocks: bool = True) -> bool:
        """Create a development environment configuration."""
        print("🔧 Setting up development mode configuration...")

        # Development environment variables
        dev_config = {
            # Core settings
            "ENVIRONMENT": "development",
            "LOG_LEVEL": "DEBUG",
            "DEBUG": "true",
            # Development mode flags
            "ENABLE_DEVELOPMENT_MODE": "true",
            "ENABLE_MOCK_SERVICES": "true" if enable_mocks else "false",
            "ENABLE_PHASE1_FEATURES": "true",
            # Mock service flags
            "MOCK_LLM_RESPONSES": "true" if enable_mocks else "false",
            "MOCK_VECTOR_STORE": "true" if enable_mocks else "false",
            "MOCK_OAUTH_FLOWS": "true" if enable_mocks else "false",
            "MOCK_DISCORD_API": "true" if enable_mocks else "false",
            # Performance settings for development
            "MAX_CONCURRENT_REQUESTS": "5",
            "REQUEST_TIMEOUT": "10",
            "CACHE_TTL": "300",
            # Monitoring settings
            "ENABLE_METRICS": "true",
            "ENABLE_TRACING": "true",
            "METRICS_PORT": "9090",
            # Security settings (relaxed for development)
            "ENABLE_RATE_LIMITING": "false",
            "RATE_LIMIT_REQUESTS_PER_MINUTE": "1000",
            # Feature flags for development
            "ENABLE_DISCORD_COMMANDS": "true",
            "ENABLE_CONTENT_MODERATION": "true",
            "ENABLE_PII_DETECTION": "true",
            "ENABLE_VECTOR_SEARCH": "true",
            "ENABLE_LLM_CACHE": "true",
            "ENABLE_API_CACHE": "true",
            "ENABLE_HTTP_CACHE": "true",
            "ENABLE_AUDIT_LOGGING": "true",
            # Development API keys (placeholders)
            "DISCORD_BOT_TOKEN": "development-bot-token-placeholder",
            "OPENAI_API_KEY": "sk-development-key-placeholder",
            "OPENROUTER_API_KEY": "sk-development-openrouter-key-placeholder",
            # Development service URLs (local/mock)
            "QDRANT_URL": "http://localhost:6333",
            "POSTGRES_URL": "postgresql://localhost:5432/ultimate_discord_intelligence_bot_dev",
            "REDIS_URL": "redis://localhost:6379/0",
            "MINIO_URL": "http://localhost:9000",
            # Development OAuth credentials (placeholders)
            "YOUTUBE_CLIENT_ID": "development-youtube-client-id",
            "YOUTUBE_CLIENT_SECRET": "development-youtube-client-secret",
            "TWITCH_CLIENT_ID": "development-twitch-client-id",
            "TWITCH_CLIENT_SECRET": "development-twitch-client-secret",
            "TIKTOK_CLIENT_ID": "development-tiktok-client-id",
            "TIKTOK_CLIENT_SECRET": "development-tiktok-client-secret",
            "INSTAGRAM_CLIENT_ID": "development-instagram-client-id",
            "INSTAGRAM_CLIENT_SECRET": "development-instagram-client-secret",
            "X_CLIENT_ID": "development-x-client-id",
            "X_CLIENT_SECRET": "development-x-client-secret",
            # Discord webhooks (placeholders)
            "DISCORD_WEBHOOK": "https://discord.com/api/webhooks/development-webhook-url",
            "DISCORD_PRIVATE_WEBHOOK": "https://discord.com/api/webhooks/development-private-webhook-url",
        }

        # Create .env file
        env_content = "# Ultimate Discord Intelligence Bot - Development Mode Configuration\n"
        env_content += "# Generated by setup_development_mode.py\n"
        env_content += "# This configuration allows development without external services\n\n"

        # Add configuration sections
        sections = {
            "Environment Settings": ["ENVIRONMENT", "LOG_LEVEL", "DEBUG"],
            "Development Mode": [
                "ENABLE_DEVELOPMENT_MODE",
                "ENABLE_MOCK_SERVICES",
                "ENABLE_PHASE1_FEATURES",
            ],
            "Mock Services": [
                "MOCK_LLM_RESPONSES",
                "MOCK_VECTOR_STORE",
                "MOCK_OAUTH_FLOWS",
                "MOCK_DISCORD_API",
            ],
            "Performance Settings": [
                "MAX_CONCURRENT_REQUESTS",
                "REQUEST_TIMEOUT",
                "CACHE_TTL",
            ],
            "Monitoring Settings": ["ENABLE_METRICS", "ENABLE_TRACING", "METRICS_PORT"],
            "Security Settings": [
                "ENABLE_RATE_LIMITING",
                "RATE_LIMIT_REQUESTS_PER_MINUTE",
            ],
            "Feature Flags": [
                "ENABLE_DISCORD_COMMANDS",
                "ENABLE_CONTENT_MODERATION",
                "ENABLE_PII_DETECTION",
                "ENABLE_VECTOR_SEARCH",
                "ENABLE_LLM_CACHE",
                "ENABLE_API_CACHE",
                "ENABLE_HTTP_CACHE",
                "ENABLE_AUDIT_LOGGING",
            ],
            "API Keys (Development)": [
                "DISCORD_BOT_TOKEN",
                "OPENAI_API_KEY",
                "OPENROUTER_API_KEY",
            ],
            "Service URLs (Development)": [
                "QDRANT_URL",
                "POSTGRES_URL",
                "REDIS_URL",
                "MINIO_URL",
            ],
            "OAuth Credentials (Development)": [
                "YOUTUBE_CLIENT_ID",
                "YOUTUBE_CLIENT_SECRET",
                "TWITCH_CLIENT_ID",
                "TWITCH_CLIENT_SECRET",
                "TIKTOK_CLIENT_ID",
                "TIKTOK_CLIENT_SECRET",
                "INSTAGRAM_CLIENT_ID",
                "INSTAGRAM_CLIENT_SECRET",
                "X_CLIENT_ID",
                "X_CLIENT_SECRET",
            ],
            "Discord Integration (Development)": [
                "DISCORD_WEBHOOK",
                "DISCORD_PRIVATE_WEBHOOK",
            ],
        }

        for section_name, keys in sections.items():
            env_content += f"\n# ====== {section_name.upper()} ======\n"
            for key in keys:
                if key in dev_config:
                    env_content += f"{key}={dev_config[key]}\n"

        # Write the .env file
        try:
            with open(self.env_file, "w") as f:
                f.write(env_content)
            print(f"✅ Created development environment file: {self.env_file}")
            return True
        except Exception as e:
            print(f"❌ Failed to create .env file: {e}")
            return False

    def set_environment_variables(self) -> bool:
        """Set environment variables for the current session."""
        print("🔧 Setting environment variables for current session...")

        # Load the .env file if it exists
        if self.env_file.exists():
            with open(self.env_file) as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith("#") and "=" in line:
                        key, value = line.split("=", 1)
                        os.environ[key] = value
            print("✅ Environment variables loaded from .env file")
            return True
        else:
            print("❌ .env file not found. Run with --create-env first.")
            return False

    def test_development_setup(self) -> dict[str, any]:
        """Test the development setup."""
        print("🧪 Testing development setup...")

        results = {
            "environment_file": {"status": "unknown", "details": {}},
            "environment_variables": {"status": "unknown", "details": {}},
            "feature_flags": {"status": "unknown", "details": {}},
            "mock_services": {"status": "unknown", "details": {}},
        }

        # Test environment file
        if self.env_file.exists():
            results["environment_file"]["status"] = "healthy"
            results["environment_file"]["details"]["file_exists"] = True
            results["environment_file"]["details"]["file_size"] = self.env_file.stat().st_size
        else:
            results["environment_file"]["status"] = "unhealthy"
            results["environment_file"]["details"]["file_exists"] = False

        # Test environment variables
        required_vars = [
            "ENVIRONMENT",
            "ENABLE_DEVELOPMENT_MODE",
            "ENABLE_MOCK_SERVICES",
        ]
        missing_vars = []
        for var in required_vars:
            if not os.getenv(var):
                missing_vars.append(var)

        if missing_vars:
            results["environment_variables"]["status"] = "unhealthy"
            results["environment_variables"]["details"]["missing_vars"] = missing_vars
        else:
            results["environment_variables"]["status"] = "healthy"
            results["environment_variables"]["details"]["all_required_set"] = True

        # Test feature flags
        feature_flags = [
            "ENABLE_DISCORD_COMMANDS",
            "ENABLE_CONTENT_MODERATION",
            "ENABLE_VECTOR_SEARCH",
            "ENABLE_LLM_CACHE",
        ]

        enabled_flags = []
        for flag in feature_flags:
            if os.getenv(flag, "").lower() in ["true", "1", "yes"]:
                enabled_flags.append(flag)

        results["feature_flags"]["status"] = "healthy" if enabled_flags else "unhealthy"
        results["feature_flags"]["details"]["enabled_flags"] = enabled_flags

        # Test mock services
        mock_services = [
            "MOCK_LLM_RESPONSES",
            "MOCK_VECTOR_STORE",
            "MOCK_OAUTH_FLOWS",
            "MOCK_DISCORD_API",
        ]

        enabled_mocks = []
        for mock in mock_services:
            if os.getenv(mock, "").lower() in ["true", "1", "yes"]:
                enabled_mocks.append(mock)

        results["mock_services"]["status"] = "healthy" if enabled_mocks else "unhealthy"
        results["mock_services"]["details"]["enabled_mocks"] = enabled_mocks

        return results

    def generate_development_report(self, test_results: dict[str, any]) -> str:
        """Generate a development setup report."""
        report = f"""# Development Mode Setup Report
Generated: {self._get_timestamp()}

## Environment File
Status: {test_results["environment_file"]["status"]}
"""

        env_details = test_results["environment_file"]["details"]
        if env_details.get("file_exists"):
            report += "- File exists: ✅\n"
            report += f"- File size: {env_details.get('file_size', 0)} bytes\n"
        else:
            report += "- File exists: ❌\n"

        report += f"""
## Environment Variables
Status: {test_results["environment_variables"]["status"]}
"""

        env_var_details = test_results["environment_variables"]["details"]
        if env_var_details.get("all_required_set"):
            report += "- All required variables set: ✅\n"
        else:
            report += f"- Missing variables: {env_var_details.get('missing_vars', [])}\n"

        report += f"""
## Feature Flags
Status: {test_results["feature_flags"]["status"]}
"""

        feature_details = test_results["feature_flags"]["details"]
        report += f"- Enabled flags: {len(feature_details.get('enabled_flags', []))}\n"
        for flag in feature_details.get("enabled_flags", []):
            report += f"  - {flag}\n"

        report += f"""
## Mock Services
Status: {test_results["mock_services"]["status"]}
"""

        mock_details = test_results["mock_services"]["details"]
        report += f"- Enabled mocks: {len(mock_details.get('enabled_mocks', []))}\n"
        for mock in mock_details.get("enabled_mocks", []):
            report += f"  - {mock}\n"

        return report

    def run_development_setup(self, enable_mocks: bool = True, test_only: bool = False) -> bool:
        """Run the complete development setup."""
        print("🚀 Starting Development Mode Setup")
        print("=" * 50)

        if not test_only:
            # Create development environment
            if not self.create_development_environment(enable_mocks):
                print("❌ Failed to create development environment")
                return False

            # Set environment variables
            if not self.set_environment_variables():
                print("❌ Failed to set environment variables")
                return False

        # Test the setup
        test_results = self.test_development_setup()

        # Generate report
        report = self.generate_development_report(test_results)
        report_file = self.project_root / "docs" / "development_mode_setup_report.md"
        with open(report_file, "w") as f:
            f.write(report)

        print(f"\n📊 Development setup report saved to: {report_file}")

        # Determine overall status
        overall_healthy = all(result["status"] == "healthy" for result in test_results.values())

        if overall_healthy:
            print("\n✅ Development Mode Setup: HEALTHY")
            print("🎉 You can now run the system in development mode!")
        else:
            print("\n⚠️ Development Mode Setup: NEEDS ATTENTION")
            print("Check the report for details on what needs to be configured.")

        return overall_healthy

    def _get_timestamp(self) -> str:
        """Get current timestamp for reports."""
        from datetime import datetime

        return datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC")


def main():
    """Main entry point."""
    parser = argparse.ArgumentParser(description="Development Mode Setup")
    parser.add_argument(
        "--enable-mocks",
        action="store_true",
        default=True,
        help="Enable mock services (default)",
    )
    parser.add_argument("--disable-mocks", action="store_true", help="Disable mock services")
    parser.add_argument(
        "--test-only",
        action="store_true",
        help="Only test existing setup, don't create files",
    )

    args = parser.parse_args()

    enable_mocks = args.enable_mocks and not args.disable_mocks

    setup = DevelopmentModeSetup()
    success = setup.run_development_setup(enable_mocks=enable_mocks, test_only=args.test_only)

    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()
