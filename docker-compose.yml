version: "3.8"

services:
  # Qdrant vector database
  qdrant:
    image: qdrant/qdrant:v1.7.3
    restart: always
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - ./qdrant_data:/qdrant/storage:rw
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:6333/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Redis for caching
  redis:
    image: redis:7-alpine
    restart: always
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    profiles:
      - full  # Only start with --profile full

  # Optional: PostgreSQL for metadata storage
  postgres:
    image: postgres:15-alpine
    restart: always
    container_name: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ultimate_discord_bot
      POSTGRES_USER: bot_user
      POSTGRES_PASSWORD: change_this_password
    profiles:
      - full  # Only start with --profile full

volumes:
  redis_data:
  postgres_data:

# Usage Examples:
# 
# Start only Qdrant (recommended for development):
#   docker-compose up -d qdrant
#
# Start all services (full stack):
#   docker-compose --profile full up -d
#
# View logs:
#   docker-compose logs -f qdrant
#
# Stop services:
#   docker-compose down
#
# Reset data (WARNING: deletes all data):
#   docker-compose down -v
