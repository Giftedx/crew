# Pytest Configuration for Parallel Test Execution
# Optimized for the Ultimate Discord Intelligence Bot project

[tool:pytest]
# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Parallel execution configuration
addopts = 
    -v
    --tb=short
    --strict-markers
    --strict-config
    --disable-warnings
    -x
    --maxfail=5
    --durations=10
    --durations-min=1.0

# Markers for test categorization
markers =
    unit: Unit tests (fast, isolated)
    integration: Integration tests (require external services)
    e2e: End-to-end tests (full workflow)
    performance: Performance and benchmark tests
    slow: Tests that take more than 5 seconds
    network: Tests that require network access
    database: Tests that require database access
    redis: Tests that require Redis
    qdrant: Tests that require Qdrant
    discord: Tests that require Discord API
    llm: Tests that require LLM services
    mcp: Tests for MCP functionality
    a2a: Tests for A2A functionality
    stress: Stress tests
    regression: Regression tests
    smoke: Smoke tests (basic functionality)
    security: Security tests
    compliance: Compliance tests

# Test filtering
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:crewai
    ignore::UserWarning:discord

# Parallel execution settings
# Use pytest-xdist for parallel execution
# Install with: pip install pytest-xdist
# Run with: pytest -n auto (auto-detect CPU cores)
# Or: pytest -n 4 (use 4 workers)

# Test timeout settings
timeout = 300
timeout_method = thread

# Coverage settings (when using pytest-cov)
# --cov=src/ultimate_discord_intelligence_bot
# --cov-report=html
# --cov-report=term-missing
# --cov-report=xml
# --cov-fail-under=80

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = reports/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Test data and fixtures
# Use test fixtures from tests/conftest.py
# Test data should be in tests/data/
# Test fixtures should be in tests/fixtures/

# Environment variables for tests
env = 
    TESTING = true
    MOCK_EXTERNAL_APIS = true
    MOCK_LLM_RESPONSES = true
    MOCK_DISCORD_API = true
    LOG_LEVEL = DEBUG

# Test collection and execution
collect_ignore = [
    "setup.py",
    "build",
    "dist",
    "*.egg-info",
    "venv",
    ".venv",
    "node_modules",
    ".git",
    "__pycache__",
    "*.pyc",
    "*.pyo",
    "*.pyd",
    ".pytest_cache",
    ".coverage",
    "htmlcov",
    "reports"
]

# Test session configuration
minversion = 7.0
required_plugins = pytest-xdist pytest-timeout pytest-mock

# Performance optimization
# Use --forked for better isolation (requires pytest-forked)
# Use --boxed for complete isolation (requires pytest-boxed)
# Use --looponfail for continuous testing (requires pytest-looponfail)

# Test reporting
# Use --html=reports/pytest_report.html for HTML reports
# Use --junitxml=reports/pytest_report.xml for JUnit XML
# Use --json-report --json-report-file=reports/pytest_report.json for JSON

# Test debugging
# Use --pdb for debugging on failures
# Use --pdbcls=IPython.terminal.debugger:Pdb for IPython debugger
# Use --capture=no to see print statements
# Use --s for no capture (see all output)

# Test profiling
# Use --profile for profiling (requires pytest-profiling)
# Use --profile-svg for SVG profile output
# Use --profile-stats for statistical profiling
