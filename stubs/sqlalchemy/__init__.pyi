"""Type stubs for sqlalchemy library."""

from collections.abc import Callable
from typing import Any

# Core SQLAlchemy types
class Engine:
    """SQLAlchemy Engine type stub."""
    def connect(self) -> Any: ...
    def execute(self, statement: Any) -> Any: ...
    def dispose(self) -> None: ...

class Session:
    """SQLAlchemy Session type stub."""
    def add(self, instance: Any) -> None: ...
    def add_all(self, instances: list[Any]) -> None: ...
    def commit(self) -> None: ...
    def rollback(self) -> None: ...
    def close(self) -> None: ...
    def query(self, *entities: Any) -> Any: ...
    def execute(self, statement: Any) -> Any: ...

class Base:
    """SQLAlchemy Base class type stub."""

class Column:
    """SQLAlchemy Column type stub."""
    def __init__(
        self,
        type_: Any,
        primary_key: bool = False,
        nullable: bool = True,
        unique: bool = False,
        index: bool = False,
        **kwargs: Any,
    ) -> None: ...

class Integer:
    """SQLAlchemy Integer type stub."""

class String:
    """SQLAlchemy String type stub."""
    def __init__(self, length: int | None = None, **kwargs: Any) -> None: ...

class Text:
    """SQLAlchemy Text type stub."""

class DateTime:
    """SQLAlchemy DateTime type stub."""

class Boolean:
    """SQLAlchemy Boolean type stub."""

class ForeignKey:
    """SQLAlchemy ForeignKey type stub."""
    def __init__(self, column: str, **kwargs: Any) -> None: ...

class relationship:
    """SQLAlchemy relationship type stub."""
    def __init__(
        self, argument: str | None = None, back_populates: str | None = None, backref: str | None = None, **kwargs: Any
    ) -> None: ...

# ORM functions
def create_engine(url: str, **kwargs: Any) -> Engine: ...
def sessionmaker(bind: Engine | None = None, **kwargs: Any) -> Callable[[], Session]: ...
def declarative_base() -> type: ...

# Query functions
def select(*entities: Any) -> Any: ...
def insert(table: Any) -> Any: ...
def update(table: Any) -> Any: ...
def delete(table: Any) -> Any: ...

# Common functions
func: Any = ...

def and_(*clauses: Any) -> Any: ...
def or_(*clauses: Any) -> Any: ...
def not_(clause: Any) -> Any: ...
