# Advanced Contextual Bandits - Docker Compose for Production Deployment

version: '3.8'

services:
  # Main Advanced Bandits Application
  advanced-bandits:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
        VERSION: ${VERSION:-1.0.0}
    image: advanced-contextual-bandits:${VERSION:-latest}
    container_name: advanced-bandits-app
    restart: unless-stopped

    environment:
      # Core configuration
      - ADVANCED_BANDITS_LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ADVANCED_BANDITS_METRICS_ENABLED=true
      - ADVANCED_BANDITS_CONFIG_PATH=/app/config/production_config.json

      # API Keys (use secrets in production)
      - DISCORD_BOT_TOKEN=${DISCORD_BOT_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}

      # Security
      - JWT_SECRET=${JWT_SECRET}

      # Observability
      - JAEGER_ENDPOINT=${JAEGER_ENDPOINT:-http://jaeger:14268/api/traces}
      - PROMETHEUS_ENDPOINT=${PROMETHEUS_ENDPOINT:-http://prometheus:9090}

      # Database (if needed)
      - DATABASE_URL=${DATABASE_URL:-postgresql://localhost:5432/bandits_db}

      # Redis (for caching)
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}

    ports:
      - "8000:8000"  # Main API
      - "8090:8090"  # Metrics

    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - ./data:/app/data
      - bandits-metrics:/app/metrics

    networks:
      - bandits-network

    depends_on:
      - postgres
      - redis
      - prometheus

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3

  # PostgreSQL for persistent storage
  postgres:
    image: postgres:15-alpine
    container_name: advanced-bandits-postgres
    restart: unless-stopped

    environment:
      - POSTGRES_DB=bandits_db
      - POSTGRES_USER=bandits
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password_change_me}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C

    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro

    networks:
      - bandits-network

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bandits -d bandits_db"]
      interval: 30s
      timeout: 10s
      retries: 3

    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: advanced-bandits-redis
    restart: unless-stopped

    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-secure_redis_password}

    volumes:
      - redis-data:/data

    networks:
      - bandits-network

    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 256M

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: advanced-bandits-prometheus
    restart: unless-stopped

    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'

    ports:
      - "9090:9090"

    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus

    networks:
      - bandits-network

    depends_on:
      - advanced-bandits

    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: advanced-bandits-grafana
    restart: unless-stopped

    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-clock-panel

    ports:
      - "3000:3000"

    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro

    networks:
      - bandits-network

    depends_on:
      - prometheus

    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: advanced-bandits-jaeger
    restart: unless-stopped

    environment:
      - COLLECTOR_OTLP_ENABLED=true

    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector
      - "14250:14250"  # Jaeger gRPC

    networks:
      - bandits-network

    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: advanced-bandits-nginx
    restart: unless-stopped

    ports:
      - "80:80"
      - "443:443"

    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx

    networks:
      - bandits-network

    depends_on:
      - advanced-bandits

    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Log aggregator (optional)
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: advanced-bandits-fluentd
    restart: unless-stopped

    volumes:
      - ./logging/fluentd.conf:/fluentd/etc/fluent.conf:ro
      - ./logs:/var/log/bandits:ro

    networks:
      - bandits-network

    depends_on:
      - advanced-bandits

# Named volumes for data persistence
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  bandits-metrics:
    driver: local
  nginx-logs:
    driver: local

# Network for service communication
networks:
  bandits-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
