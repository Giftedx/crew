# Creator Operations Multi-Agent System - Docker Compose Extension
# This extends the base docker-compose.yml with additional services for creator operations

version: '3.8'

services:
  # MinIO for object storage (audio/video blobs, processed transcripts)
  minio:
    image: minio/minio:latest
    container_name: creator-ops-minio
    restart: unless-stopped

    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin123}
      - MINIO_DEFAULT_BUCKETS=creator-ops-media,creator-ops-transcripts,creator-ops-clips

    ports:
      - "9000:9000" # MinIO API
      - "9001:9001" # MinIO Console

    volumes:
      - minio-data:/data

    networks:
      - bandits-network

    command: server /data --console-address ":9001"

    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Qdrant for vector storage and embeddings
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: creator-ops-qdrant
    restart: unless-stopped

    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334

    ports:
      - "6333:6333" # HTTP API
      - "6334:6334" # gRPC API

    volumes:
      - qdrant-data:/qdrant/storage

    networks:
      - bandits-network

    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:6333/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for rate limiting and job queues (extends existing Redis)
  redis-creator-ops:
    image: redis:7-alpine
    container_name: creator-ops-redis
    restart: unless-stopped

    command: redis-server --appendonly yes --requirepass ${REDIS_CREATOR_OPS_PASSWORD:-secure_redis_password}

    ports:
      - "6380:6379" # Different port to avoid conflict with main Redis

    volumes:
      - redis-creator-ops-data:/data

    networks:
      - bandits-network

    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_CREATOR_OPS_PASSWORD:-secure_redis_password}", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Creator Operations Worker (for background processing)
  creator-ops-worker:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
        VERSION: ${VERSION:-1.0.0}
    image: creator-ops-worker:${VERSION:-latest}
    container_name: creator-ops-worker
    restart: unless-stopped

    environment:
      # Core configuration
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENABLE_CREATOR_OPS=true
      - ENABLE_REAL_APIS=${ENABLE_REAL_APIS:-false}

      # Database
      - DATABASE_URL=${DATABASE_URL:-postgresql://bandits:${POSTGRES_PASSWORD:-secure_password_change_me}@postgres:5432/bandits_db}

      # Storage
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin123}
      - MINIO_BUCKET_PREFIX=creator-ops

      # Vector Database
      - QDRANT_URL=http://qdrant:6333
      - QDRANT_API_KEY=${QDRANT_API_KEY:-}

      # Redis
      - REDIS_URL=redis://:${REDIS_CREATOR_OPS_PASSWORD:-secure_redis_password}@redis-creator-ops:6379/0

      # API Keys
      - YOUTUBE_API_KEY=${YOUTUBE_API_KEY}
      - TWITCH_CLIENT_ID=${TWITCH_CLIENT_ID}
      - TWITCH_CLIENT_SECRET=${TWITCH_CLIENT_SECRET}
      - TIKTOK_CLIENT_KEY=${TIKTOK_CLIENT_KEY}
      - TIKTOK_CLIENT_SECRET=${TIKTOK_CLIENT_SECRET}
      - INSTAGRAM_ACCESS_TOKEN=${INSTAGRAM_ACCESS_TOKEN}
      - X_API_KEY=${X_API_KEY}
      - X_API_SECRET=${X_API_SECRET}
      - X_ACCESS_TOKEN=${X_ACCESS_TOKEN}
      - X_ACCESS_TOKEN_SECRET=${X_ACCESS_TOKEN_SECRET}

      # LLM Services
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}

      # Processing
      - WHISPER_MODEL=${WHISPER_MODEL:-large-v3}
      - USE_GPU=${USE_GPU:-true}
      - MAX_WORKERS=${MAX_WORKERS:-4}

    volumes:
      - ./data/creator-ops:/app/data
      - ./logs:/app/logs
      - ./fixtures/creator_ops:/app/fixtures

    networks:
      - bandits-network

    depends_on:
      - postgres
      - minio
      - qdrant
      - redis-creator-ops

    healthcheck:
      test: [ "CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Creator Operations API (REST API for creator features)
  creator-ops-api:
    build:
      context: .
      dockerfile: Dockerfile
    image: creator-ops-api:${VERSION:-latest}
    container_name: creator-ops-api
    restart: unless-stopped

    environment:
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENABLE_CREATOR_OPS=true
      - ENABLE_REAL_APIS=${ENABLE_REAL_APIS:-false}

      # Database
      - DATABASE_URL=${DATABASE_URL:-postgresql://bandits:${POSTGRES_PASSWORD:-secure_password_change_me}@postgres:5432/bandits_db}

      # Storage
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin123}

      # Vector Database
      - QDRANT_URL=http://qdrant:6333
      - QDRANT_API_KEY=${QDRANT_API_KEY:-}

      # Redis
      - REDIS_URL=redis://:${REDIS_CREATOR_OPS_PASSWORD:-secure_redis_password}@redis-creator-ops:6379/0

      # API Keys (same as worker)
      - YOUTUBE_API_KEY=${YOUTUBE_API_KEY}
      - TWITCH_CLIENT_ID=${TWITCH_CLIENT_ID}
      - TWITCH_CLIENT_SECRET=${TWITCH_CLIENT_SECRET}
      - TIKTOK_CLIENT_KEY=${TIKTOK_CLIENT_KEY}
      - TIKTOK_CLIENT_SECRET=${TIKTOK_CLIENT_SECRET}
      - INSTAGRAM_ACCESS_TOKEN=${INSTAGRAM_ACCESS_TOKEN}
      - X_API_KEY=${X_API_KEY}
      - X_API_SECRET=${X_API_SECRET}
      - X_ACCESS_TOKEN=${X_ACCESS_TOKEN}
      - X_ACCESS_TOKEN_SECRET=${X_ACCESS_TOKEN_SECRET}

      # LLM Services
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}

    ports:
      - "8001:8000" # Creator Operations API

    volumes:
      - ./data/creator-ops:/app/data
      - ./logs:/app/logs

    networks:
      - bandits-network

    depends_on:
      - postgres
      - minio
      - qdrant
      - redis-creator-ops
      - creator-ops-worker

    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

# Additional volumes for Creator Operations
volumes:
  minio-data:
    driver: local
  qdrant-data:
    driver: local
  redis-creator-ops-data:
    driver: local

# Extend the existing network
networks:
  bandits-network:
    external: true
