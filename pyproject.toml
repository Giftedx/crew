[project]
name = "ultimate_discord_intelligence_bot"
version = "0.1.0"
description = "ultimate_discord_intelligence_bot using crewAI"
authors = [{ name = "Your Name", email = "you@example.com" }]
requires-python = ">=3.10,<3.14"
dependencies = [
    "crewai[tools]>=0.150.0,<1.0.0",
    "qdrant-client>=1.7.3,<2.0.0",
    "aiohttp>=3.9.0",
    "PyYAML>=6.0",
    "fastapi>=0.110",
    "python-multipart>=0.0.20",
    "discord.py>=2.3.2,<3.0.0",
    "opentelemetry-sdk>=1.25.0",
    "opentelemetry-exporter-otlp>=1.25.0",
    "python-dotenv>=1.0.0,<2.0.0",
    "pydantic>=2.7.0,<3.0.0",
    "pydantic-settings>=2.2.1,<3.0.0",
]

[project.optional-dependencies]
metrics = ["prometheus-client>=0.20.0"]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "types-PyYAML",
    "types-requests",
    "ruff>=0.5.0",
    "mypy>=1.10.0",
    "pre-commit>=3.7.0",
]

[project.scripts]
ultimate_discord_intelligence_bot = "ultimate_discord_intelligence_bot.main:run"
run_crew = "ultimate_discord_intelligence_bot.main:run"
train = "ultimate_discord_intelligence_bot.main:train"
replay = "ultimate_discord_intelligence_bot.main:replay"
test = "ultimate_discord_intelligence_bot.main:test"
ingest = "ingest.__main__:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.crewai]
type = "crew"

[tool.hatch.build.targets.wheel]
packages = [
    # src layout: list explicit package directories so hatch exposes them
    "src/ultimate_discord_intelligence_bot",
    "src/ingest",
    "src/analysis",
    "src/memory",
    "src/grounding",
    "src/policy",
    "src/scheduler",
    "src/security",
    "src/debate",
    "src/core",
    "src/archive",
    "src/obs",
    "src/discord",
    "src/eval",
    "src/kg",
    "src/prompt_engine",
]

[tool.ruff]
# Moderately relaxed line length to 120 to reduce noisy long-line diffs while
# retaining review readability. (Was 100 previously.)
line-length = 120
target-version = "py310"

[tool.ruff.lint]
select = [
    "F",  # pyflakes
    "E", "W",  # pycodestyle
    "I",  # isort
    "N",  # pep8-naming
    "UP", # pyupgrade
    "ASYNC", # async best practices
    "S",  # security (bandit subset)
    "SIM", # simplify
    "PL",  # pylint subset
    "PERF", # performance
]
ignore = [
    # Allow broad exception catches in tool orchestration areas (documented)
    "SIM105",
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["S101", "PLR2004", "PLC0415"]  # allow assert, magic numbers, local imports in tests

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false

[tool.mypy]
python_version = "3.10"
warn_unused_ignores = true
warn_redundant_casts = true
warn_unreachable = true
strict_equality = true
disallow_untyped_defs = false  # incremental adoption
disallow_incomplete_defs = false
no_implicit_optional = true
show_error_codes = true
pretty = true
color_output = true
plugins = []
exclude = [
    "tests/fixtures/",
    "src/server/app.py",
]
[[tool.mypy.overrides]]
module = [
    "discord.*",
    "qdrant_client.*",
    "crewai.*",
    "opentelemetry.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "nltk.*",
    "yt_dlp.*",
    "jsonschema.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
# Optional metrics dependency; we provide runtime no-op fallbacks when absent.
module = [
    "prometheus_client.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
# Treat internal application package imports as typed even if mypy heuristics
# classify them as third-party in test-only invocation contexts.
module = [
     "ultimate_discord_intelligence_bot.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
# FastAPI app module gets picked up twice ("app" and "server.app") due to src layout.
# Silence duplicate discovery by ignoring missing imports / duplicate complaints for server package.
module = [
    "server.*",
]
ignore_errors = true
