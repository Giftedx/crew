[project]
name = "ultimate_discord_intelligence_bot"
version = "0.1.0"
description = "ultimate_discord_intelligence_bot using crewAI"
authors = [{ name = "Your Name", email = "you@example.com" }]
requires-python = ">=3.10,<3.14"
dependencies = [
    "crewai[tools]>=0.150.0,<1.0.0",
    "qdrant-client>=1.7.3,<2.0.0",
    "aiohttp>=3.9.0",
    "requests>=2.31.0,<3.0.0",
    "PyYAML>=6.0",
    "fastapi>=0.110",
    "python-multipart>=0.0.20",
    "discord.py>=2.3.2,<3.0.0",
    "opentelemetry-sdk>=1.25.0",
    "opentelemetry-exporter-otlp>=1.25.0",
    "python-dotenv>=1.0.0,<2.0.0",
    "pydantic>=2.7.0,<3.0.0",
    "pydantic-settings>=2.2.1,<3.0.0",
    "yt-dlp>=2024.1.0",
    "curl-cffi>=0.5.0",
    # NOTE: openai-whisper pulled in numba/llvmlite versions incompatible with Python 3.12.
    # Moved to optional 'whisper' extra; rely on faster-whisper by default.
    # "openai-whisper>=20231117",  # now optional
    "uvicorn[standard]>=0.29.0,<1.0.0",
    "redis[hiredis]>=5.0.0",
    "faster-whisper>=1.0.0",
    "litellm>=1.40.0,<2.0.0",
    "langsmith>=0.1.0,<1.0.0",
    "structlog>=23.1.0,<24.0.0",
    "nltk>=3.8.1,<4.0.0",
    "instructor>=1.6.0,<2.0.0",
]

[project.optional-dependencies]
metrics = ["prometheus-client>=0.20.0"]
vllm = ["vllm>=0.6.0", "torch>=2.0.0"]
whisper = ["openai-whisper>=20231117"]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "types-PyYAML",
    "types-requests",
    "types-jsonschema",
    "types-psutil",
    "types-redis",
    "ruff>=0.5.0",
    "mypy>=1.10.0",
    "pre-commit>=3.7.0",
    "pip-tools>=7.4.0",
]

[project.scripts]
ultimate_discord_intelligence_bot = "ultimate_discord_intelligence_bot.main:run"
run_crew = "ultimate_discord_intelligence_bot.main:run"
train = "ultimate_discord_intelligence_bot.main:train"
replay = "ultimate_discord_intelligence_bot.main:replay"
test = "ultimate_discord_intelligence_bot.main:test"
ingest = "ingest.__main__:main"
udib = "ultimate_discord_intelligence_bot.setup_cli:main"
rl_snapshot = "scripts.rl_snapshot:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.crewai]
type = "crew"

[tool.hatch.build.targets.wheel]
packages = [
    # src layout: list explicit package directories so hatch exposes them
    "src/ultimate_discord_intelligence_bot",
    "src/ingest",
    "src/analysis",
    "src/memory",
    "src/grounding",
    "src/policy",
    "src/scheduler",
    "src/security",
    "src/debate",
    "src/core",
    "src/archive",
    "src/obs",
    "src/eval",
    "src/kg",
    "src/prompt_engine",
    # Previously omitted runtime packages (distribution gap)
    "src/discord",
    "src/fastapi",
    "src/ops",
    "src/server",
]

[tool.ruff]
# Moderately relaxed line length to 120 to reduce noisy long-line diffs while
# retaining review readability. (Was 100 previously.)
line-length = 120
# Target Python version aligned to highest supported (project requires >=3.10,<3.14).
# Setting to py312 enables newer lint rules / syntax awareness while staying compatible.
target-version = "py312"

[tool.ruff.lint]
select = [
    "F",  # pyflakes (errors)
    "E", "W",  # pycodestyle (errors & warnings)
    "I",  # import sorting
    "UP", # pyupgrade (safe modernizations)
]
ignore = [
    # Previously allowed
    "SIM105",  # allow broad exception catches in tool orchestration areas (documented)
    "E501",    # temporarily ignore long line violations while focusing on functional fixes
    # Newly deferred for this finishing pass
    # Removed UP046/UP047 (not recognized by current Ruff version v0.5.6); reintroduce if upgrading Ruff.
    "UP038",            # isinstance tuple â†’ union style modernization deferred
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["S101", "PLR2004", "PLC0415", "E402"]  # allow assert, magic numbers, local imports in tests
"src/core/http_utils.py" = ["E402"]
"src/core/structured_llm_service.py" = ["E402"]
"src/core/vllm_service.py" = ["E402"]
"src/ingest/providers/twitch.py" = ["E402"]
"src/ingest/providers/youtube.py" = ["E402"]
"src/memory/enhanced_vector_store.py" = ["E402"]
"src/obs/enhanced_langsmith_integration.py" = ["E402"]
"src/security/redis_rate_limit.py" = ["E402"]
"scripts/diagnostics/api_diagnostic.py" = ["PLR0912", "E402", "PLR2004"]
"src/server/app.py" = ["E402", "PLC0415"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false

[tool.mypy]
python_version = "3.11"
warn_unused_ignores = true
warn_redundant_casts = true
warn_unreachable = true
strict_equality = true
disallow_untyped_defs = false  # incremental adoption
disallow_incomplete_defs = false
no_implicit_optional = true
show_error_codes = true
pretty = true
color_output = true
plugins = []
explicit_package_bases = true
# Exclude patterns (merged duplicate arrays):
exclude = [
    # Test and script directories (temporarily excluded for noise reduction)
    "tests/",
    "scripts/",
    # Fixtures & server app (duplicate discovery / dynamic runtime)
    "tests/fixtures/",
    "src/server/app.py",
    # Virtual environment
    ".venv/",
    # Prevent duplicate module discovery for bounded_cache (module and src.module)
    "src/core/cache/bounded_cache.py",
]
# Temporary scoping to speed up incremental cleanup: restrict to primary src tree.
files = ["src"]
# Global suppression of missing imports while we stabilize optional dependency guards.
ignore_missing_imports = true  # TODO: narrow via targeted overrides phase 2
[[tool.mypy.overrides]]
module = [
    "pdfminer.*",
]
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    "nltk.*",
    "yt_dlp.*",
    "jsonschema.*",
    "gptcache.*",
    "whisper.*",
    "vllm.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
# Optional metrics dependency; we provide runtime no-op fallbacks when absent.
module = [
    "prometheus_client.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
# Handle instructor and other third-party modules without type stubs
module = [
    "instructor.*",
    "openai.*",
    "litellm.*",
    "langsmith.*",
    "faster_whisper.*",
    "curl_cffi.*",
    "uvicorn.*",
    "redis.*",
    "structlog.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
# Treat internal application package imports as typed even if mypy heuristics
# classify them as third-party in test-only invocation contexts.
module = [
     "ultimate_discord_intelligence_bot.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
# FastAPI app module gets picked up twice ("app" and "server.app") due to src layout.
# Silence duplicate discovery by ignoring missing imports / duplicate complaints for server package.
module = [
    "server.*",
]
ignore_errors = true



[[tool.mypy.overrides]]
# External/runtime-heavy or optional libraries: suppress missing import noise for pre-commit speed.
module = [
    "crewai.*",
    "transformers.*",
    "transformers",
    "google.oauth2.*",
    "opentelemetry.exporter.otlp.proto.http.trace_exporter",
    "adaptive_prioritizer.*",
    "crew.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
# Additional third-party libraries without bundled stubs (reduce pre-commit noise).
module = [
    "pydantic.*",
    "pydantic_core.*",
    "qdrant_client.*",
    "aiohttp.*",
    "PIL.*",
    "dotenv.*",
    "tiktoken.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
# Observability helpers contain optional integrations; keep runtime robust and
# relax typing strictness for now to reduce noise in the CI gate.
module = [
    "obs.enhanced_monitoring",
    "obs.langsmith_integration",
]
ignore_errors = true


[[tool.mypy.overrides]]
# Suppress missing-import noise for dynamic internal packages still stabilising
module = [
    "core.*",
    "obs.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
# Dynamic / plugin-style internal packages without stable typing yet
module = [
    "analysis.*",
    "archive.*",
    "debate.*",
    "grounding.*",
    "ingest.*",
    "memory.*",
    "scheduler.*",
    "security.*",
    "kg.*",
    "policy.*",
    "eval.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
# Temporary: allow yaml unresolved import in profiles.schema while stubs evaluated.
module = [
    "ultimate_discord_intelligence_bot.profiles.schema",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
# Optional third-party runtime libraries
module = [
    "psutil",
]
ignore_missing_imports = true
