---
globs: "src/ultimate_discord_intelligence_bot/tools/*.py"
description: "Tool development patterns and standards for CrewAI tools"
---

# Tool Development Standards

## Tool Base Class (REQUIRED)

All tools must inherit from [BaseTool](mdc:src/ultimate_discord_intelligence_bot/tools/_base.py) with proper typing:

```python
from __future__ import annotations

from typing import TypedDict
from ultimate_discord_intelligence_bot.tools._base import BaseTool

class MyToolResult(TypedDict, total=False):
    status: str
    data: dict[str, Any]
    error: str

class MyTool(BaseTool[MyToolResult]):
    name: str = "My Tool"
    description: str = "Tool description for CrewAI agents"
    
    def _run(self, input_param: str) -> MyToolResult:
        # Implementation here
        pass
    
    def run(self, input_param: str) -> MyToolResult:
        return self._run(input_param)
```

## StepResult Integration (MANDATORY)

Convert tool results to [StepResult](mdc:src/ultimate_discord_intelligence_bot/step_result.py) format:

```python
from ultimate_discord_intelligence_bot.step_result import StepResult

def _run(self, input_data: str) -> MyToolResult:
    try:
        if not input_data:
            return {"status": "error", "error": "Input required"}
        
        result = process_input(input_data)
        return {"status": "success", "data": result}
    
    except Exception as e:
        return {"status": "error", "error": str(e)}
```

## Tool Registration

Tools must be explicitly registered to agents in [crew.py](mdc:src/ultimate_discord_intelligence_bot/crew.py):

```python
@agent
def my_agent(self) -> Agent:
    return Agent(
        config=self.agents_config["my_agent"],
        tools=[MyTool(), OtherTool()],
    )
```

## Service Integration

Use existing services rather than creating new ones:

```python
from ultimate_discord_intelligence_bot.services.prompt_engine import PromptEngine
from ultimate_discord_intelligence_bot.services.memory_service import MemoryService
from ultimate_discord_intelligence_bot.services.openrouter_service import OpenRouterService

class MyTool(BaseTool[MyToolResult]):
    def __init__(self):
        self.prompt_engine = PromptEngine()
        self.memory = MemoryService()
        self.llm_service = OpenRouterService()
```

## Error Handling Patterns

Follow established error handling patterns:

```python
def _run(self, url: str) -> MyToolResult:
    try:
        # Validate inputs
        if not url or not isinstance(url, str):
            return {
                "status": "error",
                "error": "URL is required and must be a string",
            }
        
        # Process with timeout
        result = process_with_timeout(url)
        
        return {
            "status": "success", 
            "data": result,
            "timestamp": time.time()
        }
        
    except TimeoutError:
        return {"status": "error", "error": "Operation timed out"}
    except Exception as e:
        logger.error(f"Tool execution failed: {e}")
        return {"status": "error", "error": str(e)}
```

## Testing Requirements

Every tool must have comprehensive tests in [tests/](mdc:tests/):

```python
# tests/test_my_tool.py
from ultimate_discord_intelligence_bot.tools.my_tool import MyTool

def test_my_tool_success():
    tool = MyTool()
    result = tool._run("valid_input")
    assert result["status"] == "success"
    assert "data" in result

def test_my_tool_error_handling():
    tool = MyTool()
    result = tool._run("")
    assert result["status"] == "error"
    assert "error" in result
```

## Documentation Requirements

Tools must be documented in [docs/tools_reference.md](mdc:docs/tools_reference.md):

```markdown
### My Tool
**File:** `src/ultimate_discord_intelligence_bot/tools/my_tool.py`

Description of what the tool does.

**Features:**
- Feature 1
- Feature 2

**Usage:**
```python
tool = MyTool()
result = tool._run("input")
```

## Tool Categories

Follow existing categorization:
- **Content Analysis**: Text processing, sentiment, fallacy detection
- **Platform Integration**: Download tools, monitor tools  
- **Memory & Storage**: Vector search, memory storage
- **Discord Integration**: Posting, alerting, QA
- **Fact Checking**: Verification, scoring, claim extraction

## Async Considerations

For async operations, use proper patterns:

```python
import asyncio

def _run(self, url: str) -> MyToolResult:
    try:
        result = asyncio.run(self._async_process(url))
        return {"status": "success", "data": result}
    except Exception as e:
        return {"status": "error", "error": str(e)}

async def _async_process(self, url: str) -> dict[str, Any]:
    # Async implementation
    pass
```

## Reuse Existing Tools

Before creating new tools, check if existing tools can be extended:
- [PipelineTool](mdc:src/ultimate_discord_intelligence_bot/tools/pipeline_tool.py) for content processing
- [MultiPlatformDownloadTool](mdc:src/ultimate_discord_intelligence_bot/tools/multi_platform_download_tool.py) for downloads
- [VectorSearchTool](mdc:src/ultimate_discord_intelligence_bot/tools/vector_search_tool.py) for memory queries