---
globs: *.py
description: "Python coding standards and conventions for the Ultimate Discord Intelligence Bot"
---
# Python Coding Standards

## Code Style Requirements

- **Target Python 3.10+** with modern language features
- **Line length: 120 characters** (configured in [pyproject.toml](mdc:pyproject.toml))
- **PEP 8 compliance** enforced by ruff
- **Type hints required** for all functions and methods
- **Comprehensive docstrings** for classes, methods, and complex functions
- **Double quotes** for strings (configured in ruff)

## Import Organization

Use ruff's isort integration for consistent import ordering:

1. Standard library imports
2. Third-party imports (crewai, discord, qdrant, etc.)
3. Local application imports

## Error Handling

Always use the [StepResult](mdc:src/ultimate_discord_intelligence_bot/step_result.py) pattern for tool returns:

```python
from ultimate_discord_intelligence_bot.step_result import StepResult

def my_tool_function(input_data: str) -> StepResult:
    if not input_data:
        return StepResult(error="missing_input", status="bad_request")
    
    try:
        result = process_data(input_data)
        return StepResult(data=result)
    except Exception as e:
        return StepResult(error=str(e), status="retryable")
```

## Async Patterns

- Use async/await for I/O operations
- Prefer aiohttp for HTTP requests
- Use asyncio.gather() for concurrent operations
- Always handle async context managers properly

## Testing Requirements

- All new code must have corresponding tests in [tests/](mdc:tests/)
- Use pytest with async support
- Mock external dependencies (APIs, databases)
- Test both success and error paths

## Common Patterns

- **Dependency Injection**: Pass dependencies rather than using globals
- **Feature Flags**: Use `ENABLE_<AREA>_<FEATURE>` environment variables
- **UTC Timestamps**: Always use timezone-aware UTC datetime objects
- **Tenancy**: Thread `(tenant, workspace)` parameters for multi-tenant features
