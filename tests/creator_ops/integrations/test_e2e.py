"""
End-to-end tests for platform API integrations.
Tests complete workflows from API calls to data processing.
"""

from unittest.mock import Mock, patch

import pytest

from ultimate_discord_intelligence_bot.creator_ops.config import CreatorOpsConfig
from ultimate_discord_intelligence_bot.creator_ops.integrations.instagram_client import InstagramClient
from ultimate_discord_intelligence_bot.creator_ops.integrations.tiktok_client import TikTokClient
from ultimate_discord_intelligence_bot.creator_ops.integrations.twitch_client import TwitchClient
from ultimate_discord_intelligence_bot.creator_ops.integrations.x_client import XClient
from ultimate_discord_intelligence_bot.creator_ops.integrations.youtube_client import YouTubeClient
from ultimate_discord_intelligence_bot.step_result import StepResult


class TestYouTubeE2E:
    """End-to-end tests for YouTube API integration."""

    @pytest.fixture
    def config(self):
        return Mock(spec=CreatorOpsConfig)

    @pytest.fixture
    def oauth_manager(self):
        manager = Mock()
        manager.get_access_token.return_value = StepResult.ok("mock_token")
        return manager

    @pytest.fixture
    def client(self, config, oauth_manager):
        return YouTubeClient(config=config, oauth_manager=oauth_manager)

    @pytest.mark.asyncio
    async def test_complete_video_analysis_workflow(self, client):
        """Test complete workflow: get video info -> get comments -> get captions."""
        # Mock API responses
        with patch.object(client, "_make_api_request") as mock_request:
            # Mock get_video_info response
            mock_request.side_effect = [
                StepResult.ok(
                    {
                        "items": [
                            {
                                "id": "test_video_id",
                                "snippet": {
                                    "title": "Test Video",
                                    "description": "Test Description",
                                    "channelId": "test_channel_id",
                                    "channelTitle": "Test Channel",
                                    "publishedAt": "2023-01-01T00:00:00Z",
                                    "thumbnails": {"default": {"url": "https://example.com/thumb.jpg"}},
                                },
                                "statistics": {"viewCount": "1000", "likeCount": "100", "commentCount": "50"},
                            }
                        ]
                    }
                ),
                # Mock get_video_comments response
                StepResult.ok(
                    {
                        "items": [
                            {
                                "id": "comment_id",
                                "snippet": {
                                    "topLevelComment": {
                                        "snippet": {
                                            "textDisplay": "Test comment",
                                            "authorDisplayName": "Test User",
                                            "publishedAt": "2023-01-01T00:00:00Z",
                                            "likeCount": 5,
                                        }
                                    }
                                },
                            }
                        ]
                    }
                ),
                # Mock get_video_captions response
                StepResult.ok(
                    {
                        "items": [
                            {
                                "id": "caption_id",
                                "snippet": {
                                    "language": "en",
                                    "name": "English",
                                    "isDraft": False,
                                    "isAutoGenerated": False,
                                },
                            }
                        ]
                    }
                ),
            ]

            # Execute workflow
            video_result = client.get_video_info("test_video_id")
            assert video_result.success

            comments_result = client.get_video_comments("test_video_id")
            assert comments_result.success

            captions_result = client.get_video_captions("test_video_id")
            assert captions_result.success

            # Verify data flow
            video_data = video_result.data
            comments_data = comments_result.data
            captions_data = captions_result.data

            assert video_data["video_id"] == "test_video_id"
            assert video_data["title"] == "Test Video"
            assert video_data["channel_id"] == "test_channel_id"

            assert "comments" in comments_data
            assert len(comments_data["comments"]) > 0
            assert comments_data["comments"][0]["comment_id"] == "comment_id"
            assert comments_data["comments"][0]["text"] == "Test comment"

            assert "captions" in captions_data
            assert len(captions_data["captions"]) > 0
            assert captions_data["captions"][0]["caption_id"] == "caption_id"
            assert captions_data["captions"][0]["language"] == "en"

    @pytest.mark.asyncio
    async def test_live_stream_monitoring_workflow(self, client):
        """Test complete workflow: get live chat -> monitor messages."""
        with patch.object(client, "_make_api_request") as mock_request:
            # Mock get_live_chat_messages response
            mock_request.return_value = StepResult.ok(
                {
                    "items": [
                        {
                            "id": "message_id",
                            "snippet": {
                                "type": "textMessageEvent",
                                "liveChatId": "live_chat_id",
                                "authorChannelId": "author_channel_id",
                                "publishedAt": "2023-01-01T00:00:00Z",
                                "textMessageDetails": {"messageText": "Test message"},
                            },
                            "authorDetails": {
                                "channelId": "author_channel_id",
                                "displayName": "Test User",
                                "isChatModerator": False,
                                "isChatOwner": False,
                                "isChatSponsor": False,
                                "isVerified": False,
                            },
                        }
                    ]
                }
            )

            # Execute workflow
            messages_result = client.get_live_chat_messages("live_chat_id")
            assert messages_result.success

            # Verify data
            messages_data = messages_result.data
            assert "messages" in messages_data
            assert len(messages_data["messages"]) > 0

            message = messages_data["messages"][0]
            assert message["message_id"] == "message_id"
            assert message["text"] == "Test message"
            assert message["author_name"] == "Test User"
            assert message["author_channel_id"] == "author_channel_id"

    @pytest.mark.asyncio
    async def test_search_and_analyze_workflow(self, client):
        """Test complete workflow: search videos -> analyze results."""
        with patch.object(client, "_make_api_request") as mock_request:
            # Mock search_videos response
            mock_request.return_value = StepResult.ok(
                {
                    "items": [
                        {
                            "id": {"videoId": "test_video_id"},
                            "snippet": {
                                "title": "Test Video",
                                "description": "Test Description",
                                "channelId": "test_channel_id",
                                "channelTitle": "Test Channel",
                                "publishedAt": "2023-01-01T00:00:00Z",
                                "thumbnails": {"default": {"url": "https://example.com/thumb.jpg"}},
                            },
                        }
                    ]
                }
            )

            # Execute workflow
            search_result = client.search_videos("test query")
            assert search_result.success

            # Verify data
            search_data = search_result.data
            assert "videos" in search_data
            assert len(search_data["videos"]) > 0

            video = search_data["videos"][0]
            assert video["video_id"] == "test_video_id"
            assert video["title"] == "Test Video"
            assert video["channel_id"] == "test_channel_id"
            assert video["channel_title"] == "Test Channel"


class TestTwitchE2E:
    """End-to-end tests for Twitch API integration."""

    @pytest.fixture
    def config(self):
        return Mock(spec=CreatorOpsConfig)

    @pytest.fixture
    def oauth_manager(self):
        manager = Mock()
        manager.get_access_token.return_value = StepResult.ok("mock_token")
        return manager

    @pytest.fixture
    def client(self, config, oauth_manager):
        return TwitchClient(config=config, oauth_manager=oauth_manager)

    @pytest.mark.asyncio
    async def test_complete_stream_analysis_workflow(self, client):
        """Test complete workflow: get user -> get stream -> get videos -> get clips."""
        with patch.object(client, "_make_api_request") as mock_request:
            # Mock API responses
            mock_request.side_effect = [
                # Mock get_user_info response
                StepResult.ok(
                    {
                        "data": [
                            {
                                "id": "123456789",
                                "login": "testuser",
                                "display_name": "Test User",
                                "type": "",
                                "broadcaster_type": "partner",
                                "description": "Test description",
                                "profile_image_url": "https://example.com/profile.jpg",
                                "offline_image_url": "https://example.com/offline.jpg",
                                "view_count": 1000000,
                                "created_at": "2023-01-01T00:00:00Z",
                            }
                        ]
                    }
                ),
                # Mock get_stream_info response
                StepResult.ok(
                    {
                        "data": [
                            {
                                "id": "stream_id",
                                "user_id": "123456789",
                                "user_login": "testuser",
                                "user_name": "Test User",
                                "game_id": "game_id",
                                "game_name": "Test Game",
                                "type": "live",
                                "title": "Test Stream",
                                "viewer_count": 1000,
                                "started_at": "2023-01-01T00:00:00Z",
                                "language": "en",
                                "thumbnail_url": "https://example.com/thumb.jpg",
                                "tag_ids": ["tag1", "tag2"],
                                "is_mature": False,
                            }
                        ]
                    }
                ),
                # Mock get_user_videos response
                StepResult.ok(
                    {
                        "data": [
                            {
                                "id": "video_id",
                                "stream_id": "stream_id",
                                "user_id": "123456789",
                                "user_login": "testuser",
                                "user_name": "Test User",
                                "title": "Test Video",
                                "description": "Test description",
                                "created_at": "2023-01-01T00:00:00Z",
                                "published_at": "2023-01-01T00:00:00Z",
                                "url": "https://example.com/video.mp4",
                                "thumbnail_url": "https://example.com/thumb.jpg",
                                "viewable": "public",
                                "view_count": 1000,
                                "language": "en",
                                "type": "archive",
                                "duration": "1h30m45s",
                            }
                        ]
                    }
                ),
                # Mock get_user_clips response
                StepResult.ok(
                    {
                        "data": [
                            {
                                "id": "clip_id",
                                "url": "https://clips.twitch.tv/clip_id",
                                "embed_url": "https://clips.twitch.tv/embed?clip=clip_id",
                                "broadcaster_id": "123456789",
                                "broadcaster_name": "Test User",
                                "creator_id": "987654321",
                                "creator_name": "Clip Creator",
                                "video_id": "video_id",
                                "game_id": "game_id",
                                "title": "Test Clip",
                                "view_count": 1000,
                                "created_at": "2023-01-01T00:00:00Z",
                                "thumbnail_url": "https://example.com/clip_thumb.jpg",
                                "duration": 30,
                            }
                        ]
                    }
                ),
            ]

            # Execute workflow
            user_result = client.get_user_info("testuser")
            assert user_result.success

            stream_result = client.get_stream_info("testuser")
            assert stream_result.success

            videos_result = client.get_user_videos("123456789")
            assert videos_result.success

            clips_result = client.get_user_clips("123456789")
            assert clips_result.success

            # Verify data flow
            user_data = user_result.data
            stream_data = stream_result.data
            videos_data = videos_result.data
            clips_data = clips_result.data

            assert user_data["user_id"] == "123456789"
            assert user_data["login"] == "testuser"
            assert user_data["display_name"] == "Test User"

            assert stream_data["stream_id"] == "stream_id"
            assert stream_data["user_id"] == "123456789"
            assert stream_data["title"] == "Test Stream"
            assert stream_data["viewer_count"] == 1000

            assert "videos" in videos_data
            assert len(videos_data["videos"]) > 0
            assert videos_data["videos"][0]["video_id"] == "video_id"
            assert videos_data["videos"][0]["title"] == "Test Video"

            assert "clips" in clips_data
            assert len(clips_data["clips"]) > 0
            assert clips_data["clips"][0]["clip_id"] == "clip_id"
            assert clips_data["clips"][0]["title"] == "Test Clip"

    @pytest.mark.asyncio
    async def test_chat_monitoring_workflow(self, client):
        """Test complete workflow: get chat messages -> analyze engagement."""
        with patch.object(client, "_make_api_request") as mock_request:
            # Mock get_chat_messages response
            mock_request.return_value = StepResult.ok(
                {
                    "data": [
                        {
                            "id": "message_id",
                            "user_id": "123456789",
                            "user_name": "testuser",
                            "user_login": "testuser",
                            "message": "Test message",
                            "timestamp": "2023-01-01T00:00:00Z",
                            "message_type": "chat",
                            "badges": ["subscriber/6", "premium/1"],
                            "color": "#FF0000",
                            "emotes": ["25:0-4"],
                            "reply_parent_msg_id": None,
                            "reply_parent_user_id": None,
                            "reply_parent_user_login": None,
                            "reply_parent_display_name": None,
                            "reply_parent_msg_body": None,
                            "thread_parent_msg_id": None,
                            "thread_parent_user_login": None,
                            "thread_parent_display_name": None,
                            "thread_parent_msg_body": None,
                        }
                    ]
                }
            )

            # Execute workflow
            messages_result = client.get_chat_messages("channel_id")
            assert messages_result.success

            # Verify data
            messages_data = messages_result.data
            assert "messages" in messages_data
            assert len(messages_data["messages"]) > 0

            message = messages_data["messages"][0]
            assert message["message_id"] == "message_id"
            assert message["user_id"] == "123456789"
            assert message["user_name"] == "testuser"
            assert message["message"] == "Test message"
            assert message["timestamp"] == "2023-01-01T00:00:00Z"
            assert message["message_type"] == "chat"
            assert message["badges"] == ["subscriber/6", "premium/1"]
            assert message["color"] == "#FF0000"
            assert message["emotes"] == ["25:0-4"]


class TestTikTokE2E:
    """End-to-end tests for TikTok API integration."""

    @pytest.fixture
    def config(self):
        return Mock(spec=CreatorOpsConfig)

    @pytest.fixture
    def oauth_manager(self):
        manager = Mock()
        manager.get_access_token.return_value = StepResult.ok("mock_token")
        return manager

    @pytest.fixture
    def client(self, config, oauth_manager):
        return TikTokClient(config=config, oauth_manager=oauth_manager)

    @pytest.mark.asyncio
    async def test_complete_content_analysis_workflow(self, client):
        """Test complete workflow: get user -> get videos -> get comments -> get insights."""
        with patch.object(client, "_make_api_request") as mock_request:
            # Mock API responses
            mock_request.side_effect = [
                # Mock get_user_info response
                StepResult.ok(
                    {
                        "data": {
                            "user": {
                                "open_id": "user_open_id",
                                "union_id": "user_union_id",
                                "avatar_url": "https://example.com/avatar.jpg",
                                "avatar_url_100": "https://example.com/avatar_100.jpg",
                                "avatar_url_200": "https://example.com/avatar_200.jpg",
                                "display_name": "Test User",
                                "bio_description": "Test bio",
                                "profile_deep_link": "https://example.com/profile",
                                "is_verified": True,
                                "follower_count": 10000,
                                "following_count": 1000,
                                "likes_count": 50000,
                                "video_count": 100,
                            }
                        }
                    }
                ),
                # Mock get_user_videos response
                StepResult.ok(
                    {
                        "data": {
                            "videos": [
                                {
                                    "id": "video_id",
                                    "create_time": 1672531200,
                                    "cover_image_url": "https://example.com/cover.jpg",
                                    "share_url": "https://example.com/share",
                                    "video_description": "Test video description",
                                    "duration": 30,
                                    "height": 1920,
                                    "width": 1080,
                                    "origin_cover_image_url": "https://example.com/origin_cover.jpg",
                                    "play_addr": {"url_list": ["https://example.com/video.mp4"]},
                                    "ratio": "9:16",
                                    "reflow_cover_image_url": "https://example.com/reflow_cover.jpg",
                                    "video_id": "video_id",
                                    "video_quality": "normal",
                                }
                            ]
                        }
                    }
                ),
                # Mock get_video_comments response
                StepResult.ok(
                    {
                        "data": {
                            "comments": [
                                {
                                    "comment_id": "comment_id",
                                    "comment": "Test comment",
                                    "create_time": 1672531200,
                                    "digg_count": 10,
                                    "reply_comment_total": 5,
                                    "reply_to_comment_id": None,
                                    "reply_to_user_id": None,
                                    "text_extra": [],
                                    "user": {
                                        "avatar_url": "https://example.com/avatar.jpg",
                                        "display_name": "Test User",
                                        "open_id": "user_open_id",
                                        "union_id": "user_union_id",
                                    },
                                }
                            ]
                        }
                    }
                ),
                # Mock get_video_insights response
                StepResult.ok(
                    {
                        "data": {
                            "list": [
                                {
                                    "date": "2023-01-01",
                                    "video_id": "video_id",
                                    "video_title": "Test Video",
                                    "video_description": "Test description",
                                    "like_count": 1000,
                                    "comment_count": 100,
                                    "share_count": 50,
                                    "view_count": 10000,
                                    "profile_views": 500,
                                    "video_play_time": 30000,
                                    "video_views": 10000,
                                    "real_time_result": {
                                        "like_count": 1000,
                                        "comment_count": 100,
                                        "share_count": 50,
                                        "view_count": 10000,
                                    },
                                }
                            ]
                        }
                    }
                ),
            ]

            # Execute workflow
            user_result = client.get_user_info("user_open_id")
            assert user_result.success

            videos_result = client.get_user_videos("user_open_id")
            assert videos_result.success

            comments_result = client.get_video_comments("video_id")
            assert comments_result.success

            insights_result = client.get_video_insights("user_open_id", "video_id")
            assert insights_result.success

            # Verify data flow
            user_data = user_result.data
            videos_data = videos_result.data
            comments_data = comments_result.data
            insights_data = insights_result.data

            assert user_data["open_id"] == "user_open_id"
            assert user_data["display_name"] == "Test User"
            assert user_data["follower_count"] == 10000
            assert user_data["video_count"] == 100

            assert "videos" in videos_data
            assert len(videos_data["videos"]) > 0
            assert videos_data["videos"][0]["video_id"] == "video_id"
            assert videos_data["videos"][0]["duration"] == 30

            assert "comments" in comments_data
            assert len(comments_data["comments"]) > 0
            assert comments_data["comments"][0]["comment_id"] == "comment_id"
            assert comments_data["comments"][0]["comment"] == "Test comment"

            assert "insights" in insights_data
            assert len(insights_data["insights"]) > 0
            assert insights_data["insights"][0]["video_id"] == "video_id"
            assert insights_data["insights"][0]["view_count"] == 10000


class TestInstagramE2E:
    """End-to-end tests for Instagram API integration."""

    @pytest.fixture
    def config(self):
        return Mock(spec=CreatorOpsConfig)

    @pytest.fixture
    def oauth_manager(self):
        manager = Mock()
        manager.get_access_token.return_value = StepResult.ok("mock_token")
        return manager

    @pytest.fixture
    def client(self, config, oauth_manager):
        return InstagramClient(config=config, oauth_manager=oauth_manager)

    @pytest.mark.asyncio
    async def test_complete_content_analysis_workflow(self, client):
        """Test complete workflow: get user -> get media -> get comments -> get insights."""
        with patch.object(client, "_make_api_request") as mock_request:
            # Mock API responses
            mock_request.side_effect = [
                # Mock get_user_info response
                StepResult.ok(
                    {
                        "id": "17841400000000000",
                        "username": "testuser",
                        "account_type": "BUSINESS",
                        "media_count": 100,
                        "followers_count": 10000,
                        "follows_count": 1000,
                        "name": "Test User",
                        "biography": "Test bio",
                        "website": "https://example.com",
                        "profile_picture_url": "https://example.com/profile.jpg",
                    }
                ),
                # Mock get_user_media response
                StepResult.ok(
                    {
                        "data": [
                            {
                                "id": "media_id",
                                "media_type": "IMAGE",
                                "media_url": "https://example.com/media.jpg",
                                "username": "testuser",
                                "timestamp": "2023-01-01T00:00:00+0000",
                                "caption": "Test caption",
                                "permalink": "https://example.com/p/ABC123",
                                "thumbnail_url": "https://example.com/thumb.jpg",
                                "like_count": 1000,
                                "comments_count": 100,
                                "children": {
                                    "data": [
                                        {
                                            "id": "child_media_id",
                                            "media_type": "VIDEO",
                                            "media_url": "https://example.com/video.mp4",
                                        }
                                    ]
                                },
                            }
                        ]
                    }
                ),
                # Mock get_media_comments response
                StepResult.ok(
                    {
                        "data": [
                            {
                                "id": "comment_id",
                                "text": "Test comment",
                                "timestamp": "2023-01-01T00:00:00+0000",
                                "like_count": 5,
                                "media": {"id": "media_id"},
                                "user": {"id": "user_id", "username": "testuser", "account_type": "PERSONAL"},
                                "replies": {
                                    "data": [
                                        {
                                            "id": "reply_id",
                                            "text": "Test reply",
                                            "timestamp": "2023-01-01T00:01:00+0000",
                                            "like_count": 2,
                                            "user": {
                                                "id": "reply_user_id",
                                                "username": "replyuser",
                                                "account_type": "PERSONAL",
                                            },
                                        }
                                    ]
                                },
                            }
                        ]
                    }
                ),
                # Mock get_media_insights response
                StepResult.ok(
                    {
                        "data": [
                            {
                                "id": "media_id",
                                "impressions": 10000,
                                "reach": 8000,
                                "likes": 1000,
                                "comments": 100,
                                "saves": 50,
                                "shares": 25,
                                "video_views": 5000,
                                "video_plays": 4500,
                                "profile_visits": 200,
                                "website_clicks": 50,
                                "email_contacts": 10,
                                "phone_call_clicks": 5,
                                "text_message_clicks": 3,
                                "get_directions_clicks": 2,
                                "follows": 15,
                                "unfollows": 5,
                                "engagement": 0.12,
                                "reach_rate": 0.08,
                                "impression_rate": 0.10,
                            }
                        ]
                    }
                ),
            ]

            # Execute workflow
            user_result = client.get_user_info("user_id", "testuser")
            assert user_result.success

            media_result = client.get_user_media("user_id")
            assert media_result.success

            comments_result = client.get_media_comments("media_id")
            assert comments_result.success

            insights_result = client.get_media_insights("media_id")
            assert insights_result.success

            # Verify data flow
            user_data = user_result.data
            media_data = media_result.data
            comments_data = comments_result.data
            insights_data = insights_result.data

            assert user_data["user_id"] == "17841400000000000"
            assert user_data["username"] == "testuser"
            assert user_data["account_type"] == "BUSINESS"
            assert user_data["followers_count"] == 10000

            assert "media" in media_data
            assert len(media_data["media"]) > 0
            assert media_data["media"][0]["media_id"] == "media_id"
            assert media_data["media"][0]["media_type"] == "IMAGE"

            assert "comments" in comments_data
            assert len(comments_data["comments"]) > 0
            assert comments_data["comments"][0]["comment_id"] == "comment_id"
            assert comments_data["comments"][0]["text"] == "Test comment"

            assert "insights" in insights_data
            assert len(insights_data["insights"]) > 0
            assert insights_data["insights"][0]["media_id"] == "media_id"
            assert insights_data["insights"][0]["impressions"] == 10000


class TestXE2E:
    """End-to-end tests for X API integration."""

    @pytest.fixture
    def config(self):
        return Mock(spec=CreatorOpsConfig)

    @pytest.fixture
    def oauth_manager(self):
        manager = Mock()
        manager.get_access_token.return_value = StepResult.ok("mock_token")
        return manager

    @pytest.fixture
    def client(self, config, oauth_manager):
        return XClient(config=config, oauth_manager=oauth_manager)

    @pytest.mark.asyncio
    async def test_complete_content_analysis_workflow(self, client):
        """Test complete workflow: get user -> get tweets -> get mentions -> search."""
        with patch.object(client, "_make_api_request") as mock_request:
            # Mock API responses
            mock_request.side_effect = [
                # Mock get_user_by_username response
                StepResult.ok(
                    {
                        "data": {
                            "id": "1234567890123456789",
                            "username": "testuser",
                            "name": "Test User",
                            "created_at": "2023-01-01T00:00:00.000Z",
                            "description": "Test description",
                            "entities": {
                                "description": {
                                    "urls": [
                                        {
                                            "start": 0,
                                            "end": 23,
                                            "url": "https://example.com",
                                            "expanded_url": "https://example.com",
                                            "display_url": "example.com",
                                        }
                                    ]
                                }
                            },
                            "location": "Test Location",
                            "pinned_tweet_id": "1234567890123456789",
                            "profile_image_url": "https://example.com/profile.jpg",
                            "protected": False,
                            "public_metrics": {
                                "followers_count": 10000,
                                "following_count": 1000,
                                "tweet_count": 100,
                                "listed_count": 50,
                            },
                            "url": "https://example.com",
                            "verified": True,
                            "verified_type": "blue",
                        }
                    },
                    Mock(),
                ),
                # Mock get_user_tweets response
                StepResult.ok(
                    {
                        "data": [
                            {
                                "id": "1234567890123456789",
                                "text": "Test tweet",
                                "created_at": "2023-01-01T00:00:00.000Z",
                                "author_id": "1234567890123456789",
                                "conversation_id": "1234567890123456789",
                                "in_reply_to_user_id": None,
                                "referenced_tweets": [],
                                "attachments": {
                                    "media_keys": ["media_key"],
                                    "poll_ids": [],
                                    "urls": [
                                        {
                                            "start": 0,
                                            "end": 23,
                                            "url": "https://example.com",
                                            "expanded_url": "https://example.com",
                                            "display_url": "example.com",
                                            "images": [
                                                {"url": "https://example.com/image.jpg", "width": 1200, "height": 630}
                                            ],
                                            "status": 200,
                                            "title": "Test Title",
                                            "description": "Test Description",
                                            "unwound_url": "https://example.com",
                                        }
                                    ],
                                },
                                "entities": {
                                    "hashtags": [{"start": 0, "end": 9, "tag": "test"}],
                                    "mentions": [{"start": 0, "end": 9, "username": "testuser"}],
                                    "urls": [
                                        {
                                            "start": 0,
                                            "end": 23,
                                            "url": "https://example.com",
                                            "expanded_url": "https://example.com",
                                            "display_url": "example.com",
                                        }
                                    ],
                                },
                                "public_metrics": {
                                    "retweet_count": 10,
                                    "reply_count": 5,
                                    "like_count": 100,
                                    "quote_count": 2,
                                },
                                "context_annotations": [
                                    {
                                        "domain": {
                                            "id": "domain_id",
                                            "name": "Test Domain",
                                            "description": "Test Domain Description",
                                        },
                                        "entity": {
                                            "id": "entity_id",
                                            "name": "Test Entity",
                                            "description": "Test Entity Description",
                                        },
                                    }
                                ],
                                "lang": "en",
                                "source": "Twitter Web App",
                                "withheld": {"copyright": False, "country_codes": []},
                            }
                        ]
                    },
                    Mock(),
                ),
                # Mock get_tweet_mentions response
                StepResult.ok(
                    {
                        "data": [
                            {
                                "id": "1234567890123456789",
                                "text": "@testuser Test mention",
                                "created_at": "2023-01-01T00:00:00.000Z",
                                "author_id": "9876543210987654321",
                                "conversation_id": "1234567890123456789",
                                "in_reply_to_user_id": "1234567890123456789",
                                "referenced_tweets": [{"type": "replied_to", "id": "1234567890123456789"}],
                                "attachments": {"media_keys": [], "poll_ids": [], "urls": []},
                                "entities": {
                                    "hashtags": [],
                                    "mentions": [{"start": 0, "end": 9, "username": "testuser"}],
                                    "urls": [],
                                },
                                "public_metrics": {
                                    "retweet_count": 5,
                                    "reply_count": 2,
                                    "like_count": 50,
                                    "quote_count": 1,
                                },
                                "context_annotations": [],
                                "lang": "en",
                                "source": "Twitter Web App",
                                "withheld": {"copyright": False, "country_codes": []},
                            }
                        ]
                    },
                    Mock(),
                ),
                # Mock search_tweets response
                StepResult.ok(
                    {
                        "data": [
                            {
                                "id": "1234567890123456789",
                                "text": "Test search result",
                                "created_at": "2023-01-01T00:00:00.000Z",
                                "author_id": "1234567890123456789",
                                "conversation_id": "1234567890123456789",
                                "in_reply_to_user_id": None,
                                "referenced_tweets": [],
                                "attachments": {"media_keys": [], "poll_ids": [], "urls": []},
                                "entities": {
                                    "hashtags": [{"start": 0, "end": 9, "tag": "test"}],
                                    "mentions": [],
                                    "urls": [],
                                },
                                "public_metrics": {
                                    "retweet_count": 20,
                                    "reply_count": 10,
                                    "like_count": 200,
                                    "quote_count": 5,
                                },
                                "context_annotations": [],
                                "lang": "en",
                                "source": "Twitter Web App",
                                "withheld": {"copyright": False, "country_codes": []},
                            }
                        ]
                    },
                    Mock(),
                ),
            ]

            # Execute workflow
            user_result = client.get_user_by_username("testuser", "testuser")
            assert user_result.success

            tweets_result = client.get_user_tweets("user_id")
            assert tweets_result.success

            mentions_result = client.get_tweet_mentions("user_id")
            assert mentions_result.success

            search_result = client.search_tweets("test query")
            assert search_result.success

            # Verify data flow
            user_data = user_result.data
            tweets_data = tweets_result.data
            mentions_data = mentions_result.data
            search_data = search_result.data

            assert user_data["user_id"] == "1234567890123456789"
            assert user_data["username"] == "testuser"
            assert user_data["name"] == "Test User"
            assert user_data["followers_count"] == 10000

            assert "tweets" in tweets_data
            assert len(tweets_data["tweets"]) > 0
            assert tweets_data["tweets"][0]["tweet_id"] == "1234567890123456789"
            assert tweets_data["tweets"][0]["text"] == "Test tweet"

            assert "mentions" in mentions_data
            assert len(mentions_data["mentions"]) > 0
            assert mentions_data["mentions"][0]["tweet_id"] == "1234567890123456789"
            assert mentions_data["mentions"][0]["text"] == "@testuser Test mention"

            assert "tweets" in search_data
            assert len(search_data["tweets"]) > 0
            assert search_data["tweets"][0]["tweet_id"] == "1234567890123456789"
            assert search_data["tweets"][0]["text"] == "Test search result"

    @pytest.mark.asyncio
    async def test_media_upload_workflow(self, client):
        """Test complete workflow: upload media -> get processing status."""
        with patch.object(client, "_make_api_request") as mock_request:
            # Mock upload_media response
            mock_request.return_value = StepResult.ok(
                {
                    "media_id": "1234567890123456789",
                    "media_id_string": "1234567890123456789",
                    "size": 1024,
                    "expires_after_secs": 3600,
                    "processing_info": {"state": "in_progress", "check_after_secs": 30, "progress_percent": 50},
                },
                Mock(),
            )

            # Execute workflow
            upload_result = client.upload_media("test_file.jpg", "image/jpeg")
            assert upload_result.success

            # Verify data
            upload_data = upload_result.data
            assert upload_data["media_id"] == "1234567890123456789"
            assert upload_data["media_id_string"] == "1234567890123456789"
            assert upload_data["size"] == 1024
            assert upload_data["expires_after_secs"] == 3600

            processing_info = upload_data["processing_info"]
            assert processing_info["state"] == "in_progress"
            assert processing_info["check_after_secs"] == 30
            assert processing_info["progress_percent"] == 50
